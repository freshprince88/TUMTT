//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// Dieser Quellcode wurde automatisch generiert von xsd, Version=4.0.30319.33440.
// 


/// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
[global::System.Serializable()]
[global::System.ComponentModel.DesignerCategoryAttribute("code")]
[global::System.ComponentModel.ToolboxItem(true)]
[global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
[global::System.Xml.Serialization.XmlRootAttribute("DataSetTT")]
[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
public partial class DataSetTT : global::System.Data.DataSet {
    
    private RankDataTable tableRank;
    
    private MatchDataTable tableMatch;
    
    private FirstPlayerDataTable tableFirstPlayer;
    
    private SecondPlayerDataTable tableSecondPlayer;
    
    private RalliesDataTable tableRallies;
    
    private RallyDataTable tableRally;
    
    private CurrentRallyScoreDataTable tableCurrentRallyScore;
    
    private CurrentSetScoreDataTable tableCurrentSetScore;
    
    private SchlagDataTable tableSchlag;
    
    private SchlagtechnikDataTable tableSchlagtechnik;
    
    private SpinDataTable tableSpin;
    
    private PlatzierungDataTable tablePlatzierung;
    
    private global::System.Data.DataRelation relationFirstPlayer_Rank;
    
    private global::System.Data.DataRelation relationSecondPlayer_Rank;
    
    private global::System.Data.DataRelation relationMatch_FirstPlayer;
    
    private global::System.Data.DataRelation relationMatch_SecondPlayer;
    
    private global::System.Data.DataRelation relationMatch_Rallies;
    
    private global::System.Data.DataRelation relationRallies_Rally;
    
    private global::System.Data.DataRelation relationRally_CurrentRallyScore;
    
    private global::System.Data.DataRelation relationRally_CurrentSetScore;
    
    private global::System.Data.DataRelation relationRally_Schlag;
    
    private global::System.Data.DataRelation relationSchlag_Schlagtechnik;
    
    private global::System.Data.DataRelation relationSchlag_Spin;
    
    private global::System.Data.DataRelation relationSchlag_Platzierung;
    
    private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public DataSetTT() {
        this.BeginInit();
        this.InitClass();
        global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
        base.Tables.CollectionChanged += schemaChangedHandler;
        base.Relations.CollectionChanged += schemaChangedHandler;
        this.EndInit();
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected DataSetTT(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
            base(info, context, false) {
        if ((this.IsBinarySerialized(info, context) == true)) {
            this.InitVars(false);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler1;
            this.Relations.CollectionChanged += schemaChangedHandler1;
            return;
        }
        string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
        if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
            global::System.Data.DataSet ds = new global::System.Data.DataSet();
            ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            if ((ds.Tables["Rank"] != null)) {
                base.Tables.Add(new RankDataTable(ds.Tables["Rank"]));
            }
            if ((ds.Tables["Match"] != null)) {
                base.Tables.Add(new MatchDataTable(ds.Tables["Match"]));
            }
            if ((ds.Tables["FirstPlayer"] != null)) {
                base.Tables.Add(new FirstPlayerDataTable(ds.Tables["FirstPlayer"]));
            }
            if ((ds.Tables["SecondPlayer"] != null)) {
                base.Tables.Add(new SecondPlayerDataTable(ds.Tables["SecondPlayer"]));
            }
            if ((ds.Tables["Rallies"] != null)) {
                base.Tables.Add(new RalliesDataTable(ds.Tables["Rallies"]));
            }
            if ((ds.Tables["Rally"] != null)) {
                base.Tables.Add(new RallyDataTable(ds.Tables["Rally"]));
            }
            if ((ds.Tables["CurrentRallyScore"] != null)) {
                base.Tables.Add(new CurrentRallyScoreDataTable(ds.Tables["CurrentRallyScore"]));
            }
            if ((ds.Tables["CurrentSetScore"] != null)) {
                base.Tables.Add(new CurrentSetScoreDataTable(ds.Tables["CurrentSetScore"]));
            }
            if ((ds.Tables["Schlag"] != null)) {
                base.Tables.Add(new SchlagDataTable(ds.Tables["Schlag"]));
            }
            if ((ds.Tables["Schlagtechnik"] != null)) {
                base.Tables.Add(new SchlagtechnikDataTable(ds.Tables["Schlagtechnik"]));
            }
            if ((ds.Tables["Spin"] != null)) {
                base.Tables.Add(new SpinDataTable(ds.Tables["Spin"]));
            }
            if ((ds.Tables["Platzierung"] != null)) {
                base.Tables.Add(new PlatzierungDataTable(ds.Tables["Platzierung"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        else {
            this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
        }
        this.GetSerializationData(info, context);
        global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
        base.Tables.CollectionChanged += schemaChangedHandler;
        this.Relations.CollectionChanged += schemaChangedHandler;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public RankDataTable Rank {
        get {
            return this.tableRank;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public MatchDataTable Match {
        get {
            return this.tableMatch;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public FirstPlayerDataTable FirstPlayer {
        get {
            return this.tableFirstPlayer;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public SecondPlayerDataTable SecondPlayer {
        get {
            return this.tableSecondPlayer;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public RalliesDataTable Rallies {
        get {
            return this.tableRallies;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public RallyDataTable Rally {
        get {
            return this.tableRally;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public CurrentRallyScoreDataTable CurrentRallyScore {
        get {
            return this.tableCurrentRallyScore;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public CurrentSetScoreDataTable CurrentSetScore {
        get {
            return this.tableCurrentSetScore;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public SchlagDataTable Schlag {
        get {
            return this.tableSchlag;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public SchlagtechnikDataTable Schlagtechnik {
        get {
            return this.tableSchlagtechnik;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public SpinDataTable Spin {
        get {
            return this.tableSpin;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public PlatzierungDataTable Platzierung {
        get {
            return this.tablePlatzierung;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [global::System.ComponentModel.BrowsableAttribute(true)]
    [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
    public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
        get {
            return this._schemaSerializationMode;
        }
        set {
            this._schemaSerializationMode = value;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
    public new global::System.Data.DataTableCollection Tables {
        get {
            return base.Tables;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
    public new global::System.Data.DataRelationCollection Relations {
        get {
            return base.Relations;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected override void InitializeDerivedDataSet() {
        this.BeginInit();
        this.InitClass();
        this.EndInit();
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public override global::System.Data.DataSet Clone() {
        DataSetTT cln = ((DataSetTT)(base.Clone()));
        cln.InitVars();
        cln.SchemaSerializationMode = this.SchemaSerializationMode;
        return cln;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected override bool ShouldSerializeTables() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected override bool ShouldSerializeRelations() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
        if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
            this.Reset();
            global::System.Data.DataSet ds = new global::System.Data.DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Rank"] != null)) {
                base.Tables.Add(new RankDataTable(ds.Tables["Rank"]));
            }
            if ((ds.Tables["Match"] != null)) {
                base.Tables.Add(new MatchDataTable(ds.Tables["Match"]));
            }
            if ((ds.Tables["FirstPlayer"] != null)) {
                base.Tables.Add(new FirstPlayerDataTable(ds.Tables["FirstPlayer"]));
            }
            if ((ds.Tables["SecondPlayer"] != null)) {
                base.Tables.Add(new SecondPlayerDataTable(ds.Tables["SecondPlayer"]));
            }
            if ((ds.Tables["Rallies"] != null)) {
                base.Tables.Add(new RalliesDataTable(ds.Tables["Rallies"]));
            }
            if ((ds.Tables["Rally"] != null)) {
                base.Tables.Add(new RallyDataTable(ds.Tables["Rally"]));
            }
            if ((ds.Tables["CurrentRallyScore"] != null)) {
                base.Tables.Add(new CurrentRallyScoreDataTable(ds.Tables["CurrentRallyScore"]));
            }
            if ((ds.Tables["CurrentSetScore"] != null)) {
                base.Tables.Add(new CurrentSetScoreDataTable(ds.Tables["CurrentSetScore"]));
            }
            if ((ds.Tables["Schlag"] != null)) {
                base.Tables.Add(new SchlagDataTable(ds.Tables["Schlag"]));
            }
            if ((ds.Tables["Schlagtechnik"] != null)) {
                base.Tables.Add(new SchlagtechnikDataTable(ds.Tables["Schlagtechnik"]));
            }
            if ((ds.Tables["Spin"] != null)) {
                base.Tables.Add(new SpinDataTable(ds.Tables["Spin"]));
            }
            if ((ds.Tables["Platzierung"] != null)) {
                base.Tables.Add(new PlatzierungDataTable(ds.Tables["Platzierung"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        else {
            this.ReadXml(reader);
            this.InitVars();
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
        global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
        this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
        stream.Position = 0;
        return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    internal void InitVars() {
        this.InitVars(true);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    internal void InitVars(bool initTable) {
        this.tableRank = ((RankDataTable)(base.Tables["Rank"]));
        if ((initTable == true)) {
            if ((this.tableRank != null)) {
                this.tableRank.InitVars();
            }
        }
        this.tableMatch = ((MatchDataTable)(base.Tables["Match"]));
        if ((initTable == true)) {
            if ((this.tableMatch != null)) {
                this.tableMatch.InitVars();
            }
        }
        this.tableFirstPlayer = ((FirstPlayerDataTable)(base.Tables["FirstPlayer"]));
        if ((initTable == true)) {
            if ((this.tableFirstPlayer != null)) {
                this.tableFirstPlayer.InitVars();
            }
        }
        this.tableSecondPlayer = ((SecondPlayerDataTable)(base.Tables["SecondPlayer"]));
        if ((initTable == true)) {
            if ((this.tableSecondPlayer != null)) {
                this.tableSecondPlayer.InitVars();
            }
        }
        this.tableRallies = ((RalliesDataTable)(base.Tables["Rallies"]));
        if ((initTable == true)) {
            if ((this.tableRallies != null)) {
                this.tableRallies.InitVars();
            }
        }
        this.tableRally = ((RallyDataTable)(base.Tables["Rally"]));
        if ((initTable == true)) {
            if ((this.tableRally != null)) {
                this.tableRally.InitVars();
            }
        }
        this.tableCurrentRallyScore = ((CurrentRallyScoreDataTable)(base.Tables["CurrentRallyScore"]));
        if ((initTable == true)) {
            if ((this.tableCurrentRallyScore != null)) {
                this.tableCurrentRallyScore.InitVars();
            }
        }
        this.tableCurrentSetScore = ((CurrentSetScoreDataTable)(base.Tables["CurrentSetScore"]));
        if ((initTable == true)) {
            if ((this.tableCurrentSetScore != null)) {
                this.tableCurrentSetScore.InitVars();
            }
        }
        this.tableSchlag = ((SchlagDataTable)(base.Tables["Schlag"]));
        if ((initTable == true)) {
            if ((this.tableSchlag != null)) {
                this.tableSchlag.InitVars();
            }
        }
        this.tableSchlagtechnik = ((SchlagtechnikDataTable)(base.Tables["Schlagtechnik"]));
        if ((initTable == true)) {
            if ((this.tableSchlagtechnik != null)) {
                this.tableSchlagtechnik.InitVars();
            }
        }
        this.tableSpin = ((SpinDataTable)(base.Tables["Spin"]));
        if ((initTable == true)) {
            if ((this.tableSpin != null)) {
                this.tableSpin.InitVars();
            }
        }
        this.tablePlatzierung = ((PlatzierungDataTable)(base.Tables["Platzierung"]));
        if ((initTable == true)) {
            if ((this.tablePlatzierung != null)) {
                this.tablePlatzierung.InitVars();
            }
        }
        this.relationFirstPlayer_Rank = this.Relations["FirstPlayer_Rank"];
        this.relationSecondPlayer_Rank = this.Relations["SecondPlayer_Rank"];
        this.relationMatch_FirstPlayer = this.Relations["Match_FirstPlayer"];
        this.relationMatch_SecondPlayer = this.Relations["Match_SecondPlayer"];
        this.relationMatch_Rallies = this.Relations["Match_Rallies"];
        this.relationRallies_Rally = this.Relations["Rallies_Rally"];
        this.relationRally_CurrentRallyScore = this.Relations["Rally_CurrentRallyScore"];
        this.relationRally_CurrentSetScore = this.Relations["Rally_CurrentSetScore"];
        this.relationRally_Schlag = this.Relations["Rally_Schlag"];
        this.relationSchlag_Schlagtechnik = this.Relations["Schlag_Schlagtechnik"];
        this.relationSchlag_Spin = this.Relations["Schlag_Spin"];
        this.relationSchlag_Platzierung = this.Relations["Schlag_Platzierung"];
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private void InitClass() {
        this.DataSetName = "DataSetTT";
        this.Prefix = "";
        this.EnforceConstraints = true;
        this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        this.tableRank = new RankDataTable();
        base.Tables.Add(this.tableRank);
        this.tableMatch = new MatchDataTable();
        base.Tables.Add(this.tableMatch);
        this.tableFirstPlayer = new FirstPlayerDataTable();
        base.Tables.Add(this.tableFirstPlayer);
        this.tableSecondPlayer = new SecondPlayerDataTable();
        base.Tables.Add(this.tableSecondPlayer);
        this.tableRallies = new RalliesDataTable();
        base.Tables.Add(this.tableRallies);
        this.tableRally = new RallyDataTable();
        base.Tables.Add(this.tableRally);
        this.tableCurrentRallyScore = new CurrentRallyScoreDataTable();
        base.Tables.Add(this.tableCurrentRallyScore);
        this.tableCurrentSetScore = new CurrentSetScoreDataTable();
        base.Tables.Add(this.tableCurrentSetScore);
        this.tableSchlag = new SchlagDataTable();
        base.Tables.Add(this.tableSchlag);
        this.tableSchlagtechnik = new SchlagtechnikDataTable();
        base.Tables.Add(this.tableSchlagtechnik);
        this.tableSpin = new SpinDataTable();
        base.Tables.Add(this.tableSpin);
        this.tablePlatzierung = new PlatzierungDataTable();
        base.Tables.Add(this.tablePlatzierung);
        global::System.Data.ForeignKeyConstraint fkc;
        fkc = new global::System.Data.ForeignKeyConstraint("FirstPlayer_Rank", new global::System.Data.DataColumn[] {
                    this.tableFirstPlayer.FirstPlayer_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableRank.FirstPlayer_IdColumn});
        this.tableRank.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("SecondPlayer_Rank", new global::System.Data.DataColumn[] {
                    this.tableSecondPlayer.SecondPlayer_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableRank.SecondPlayer_IdColumn});
        this.tableRank.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("Match_FirstPlayer", new global::System.Data.DataColumn[] {
                    this.tableMatch.Match_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableFirstPlayer.Match_IdColumn});
        this.tableFirstPlayer.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("Match_SecondPlayer", new global::System.Data.DataColumn[] {
                    this.tableMatch.Match_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableSecondPlayer.Match_IdColumn});
        this.tableSecondPlayer.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("Match_Rallies", new global::System.Data.DataColumn[] {
                    this.tableMatch.Match_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableRallies.Match_IdColumn});
        this.tableRallies.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("Rallies_Rally", new global::System.Data.DataColumn[] {
                    this.tableRallies.Rallies_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableRally.Rallies_IdColumn});
        this.tableRally.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("Rally_CurrentRallyScore", new global::System.Data.DataColumn[] {
                    this.tableRally.Rally_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableCurrentRallyScore.Rally_IdColumn});
        this.tableCurrentRallyScore.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("Rally_CurrentSetScore", new global::System.Data.DataColumn[] {
                    this.tableRally.Rally_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableCurrentSetScore.Rally_IdColumn});
        this.tableCurrentSetScore.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("Rally_Schlag", new global::System.Data.DataColumn[] {
                    this.tableRally.Rally_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableSchlag.Rally_IdColumn});
        this.tableSchlag.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("Schlag_Schlagtechnik", new global::System.Data.DataColumn[] {
                    this.tableSchlag.Schlag_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableSchlagtechnik.Schlag_IdColumn});
        this.tableSchlagtechnik.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("Schlag_Spin", new global::System.Data.DataColumn[] {
                    this.tableSchlag.Schlag_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableSpin.Schlag_IdColumn});
        this.tableSpin.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("Schlag_Platzierung", new global::System.Data.DataColumn[] {
                    this.tableSchlag.Schlag_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tablePlatzierung.Schlag_IdColumn});
        this.tablePlatzierung.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        this.relationFirstPlayer_Rank = new global::System.Data.DataRelation("FirstPlayer_Rank", new global::System.Data.DataColumn[] {
                    this.tableFirstPlayer.FirstPlayer_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableRank.FirstPlayer_IdColumn}, false);
        this.relationFirstPlayer_Rank.Nested = true;
        this.Relations.Add(this.relationFirstPlayer_Rank);
        this.relationSecondPlayer_Rank = new global::System.Data.DataRelation("SecondPlayer_Rank", new global::System.Data.DataColumn[] {
                    this.tableSecondPlayer.SecondPlayer_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableRank.SecondPlayer_IdColumn}, false);
        this.relationSecondPlayer_Rank.Nested = true;
        this.Relations.Add(this.relationSecondPlayer_Rank);
        this.relationMatch_FirstPlayer = new global::System.Data.DataRelation("Match_FirstPlayer", new global::System.Data.DataColumn[] {
                    this.tableMatch.Match_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableFirstPlayer.Match_IdColumn}, false);
        this.relationMatch_FirstPlayer.Nested = true;
        this.Relations.Add(this.relationMatch_FirstPlayer);
        this.relationMatch_SecondPlayer = new global::System.Data.DataRelation("Match_SecondPlayer", new global::System.Data.DataColumn[] {
                    this.tableMatch.Match_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableSecondPlayer.Match_IdColumn}, false);
        this.relationMatch_SecondPlayer.Nested = true;
        this.Relations.Add(this.relationMatch_SecondPlayer);
        this.relationMatch_Rallies = new global::System.Data.DataRelation("Match_Rallies", new global::System.Data.DataColumn[] {
                    this.tableMatch.Match_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableRallies.Match_IdColumn}, false);
        this.relationMatch_Rallies.Nested = true;
        this.Relations.Add(this.relationMatch_Rallies);
        this.relationRallies_Rally = new global::System.Data.DataRelation("Rallies_Rally", new global::System.Data.DataColumn[] {
                    this.tableRallies.Rallies_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableRally.Rallies_IdColumn}, false);
        this.relationRallies_Rally.Nested = true;
        this.Relations.Add(this.relationRallies_Rally);
        this.relationRally_CurrentRallyScore = new global::System.Data.DataRelation("Rally_CurrentRallyScore", new global::System.Data.DataColumn[] {
                    this.tableRally.Rally_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableCurrentRallyScore.Rally_IdColumn}, false);
        this.relationRally_CurrentRallyScore.Nested = true;
        this.Relations.Add(this.relationRally_CurrentRallyScore);
        this.relationRally_CurrentSetScore = new global::System.Data.DataRelation("Rally_CurrentSetScore", new global::System.Data.DataColumn[] {
                    this.tableRally.Rally_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableCurrentSetScore.Rally_IdColumn}, false);
        this.relationRally_CurrentSetScore.Nested = true;
        this.Relations.Add(this.relationRally_CurrentSetScore);
        this.relationRally_Schlag = new global::System.Data.DataRelation("Rally_Schlag", new global::System.Data.DataColumn[] {
                    this.tableRally.Rally_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableSchlag.Rally_IdColumn}, false);
        this.relationRally_Schlag.Nested = true;
        this.Relations.Add(this.relationRally_Schlag);
        this.relationSchlag_Schlagtechnik = new global::System.Data.DataRelation("Schlag_Schlagtechnik", new global::System.Data.DataColumn[] {
                    this.tableSchlag.Schlag_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableSchlagtechnik.Schlag_IdColumn}, false);
        this.relationSchlag_Schlagtechnik.Nested = true;
        this.Relations.Add(this.relationSchlag_Schlagtechnik);
        this.relationSchlag_Spin = new global::System.Data.DataRelation("Schlag_Spin", new global::System.Data.DataColumn[] {
                    this.tableSchlag.Schlag_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableSpin.Schlag_IdColumn}, false);
        this.relationSchlag_Spin.Nested = true;
        this.Relations.Add(this.relationSchlag_Spin);
        this.relationSchlag_Platzierung = new global::System.Data.DataRelation("Schlag_Platzierung", new global::System.Data.DataColumn[] {
                    this.tableSchlag.Schlag_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tablePlatzierung.Schlag_IdColumn}, false);
        this.relationSchlag_Platzierung.Nested = true;
        this.Relations.Add(this.relationSchlag_Platzierung);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeRank() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeMatch() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeFirstPlayer() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeSecondPlayer() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeRallies() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeRally() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeCurrentRallyScore() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeCurrentSetScore() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeSchlag() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeSchlagtechnik() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeSpin() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializePlatzierung() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
        if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
            this.InitVars();
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
        DataSetTT ds = new DataSetTT();
        global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
        global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
        global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
        any.Namespace = ds.Namespace;
        sequence.Items.Add(any);
        type.Particle = sequence;
        global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
        if (xs.Contains(dsSchema.TargetNamespace)) {
            global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
            global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
            try {
                global::System.Xml.Schema.XmlSchema schema = null;
                dsSchema.Write(s1);
                for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                    schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                    s2.SetLength(0);
                    schema.Write(s2);
                    if ((s1.Length == s2.Length)) {
                        s1.Position = 0;
                        s2.Position = 0;
                        for (; ((s1.Position != s1.Length) 
                                    && (s1.ReadByte() == s2.ReadByte())); ) {
                            ;
                        }
                        if ((s1.Position == s1.Length)) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if ((s1 != null)) {
                    s1.Close();
                }
                if ((s2 != null)) {
                    s2.Close();
                }
            }
        }
        xs.Add(dsSchema);
        return type;
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void RankRowChangeEventHandler(object sender, RankRowChangeEvent e);
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void MatchRowChangeEventHandler(object sender, MatchRowChangeEvent e);
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void FirstPlayerRowChangeEventHandler(object sender, FirstPlayerRowChangeEvent e);
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void SecondPlayerRowChangeEventHandler(object sender, SecondPlayerRowChangeEvent e);
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void RalliesRowChangeEventHandler(object sender, RalliesRowChangeEvent e);
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void RallyRowChangeEventHandler(object sender, RallyRowChangeEvent e);
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void CurrentRallyScoreRowChangeEventHandler(object sender, CurrentRallyScoreRowChangeEvent e);
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void CurrentSetScoreRowChangeEventHandler(object sender, CurrentSetScoreRowChangeEvent e);
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void SchlagRowChangeEventHandler(object sender, SchlagRowChangeEvent e);
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void SchlagtechnikRowChangeEventHandler(object sender, SchlagtechnikRowChangeEvent e);
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void SpinRowChangeEventHandler(object sender, SpinRowChangeEvent e);
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void PlatzierungRowChangeEventHandler(object sender, PlatzierungRowChangeEvent e);
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class RankDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnPosition;
        
        private global::System.Data.DataColumn columnDate;
        
        private global::System.Data.DataColumn columnFirstPlayer_Id;
        
        private global::System.Data.DataColumn columnSecondPlayer_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public RankDataTable() {
            this.TableName = "Rank";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal RankDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected RankDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn PositionColumn {
            get {
                return this.columnPosition;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn DateColumn {
            get {
                return this.columnDate;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn FirstPlayer_IdColumn {
            get {
                return this.columnFirstPlayer_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn SecondPlayer_IdColumn {
            get {
                return this.columnSecondPlayer_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public RankRow this[int index] {
            get {
                return ((RankRow)(this.Rows[index]));
            }
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event RankRowChangeEventHandler RankRowChanging;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event RankRowChangeEventHandler RankRowChanged;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event RankRowChangeEventHandler RankRowDeleting;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event RankRowChangeEventHandler RankRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void AddRankRow(RankRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public RankRow AddRankRow(string Position, string Date, FirstPlayerRow parentFirstPlayerRowByFirstPlayer_Rank, SecondPlayerRow parentSecondPlayerRowBySecondPlayer_Rank) {
            RankRow rowRankRow = ((RankRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    Position,
                    Date,
                    null,
                    null};
            if ((parentFirstPlayerRowByFirstPlayer_Rank != null)) {
                columnValuesArray[2] = parentFirstPlayerRowByFirstPlayer_Rank[6];
            }
            if ((parentSecondPlayerRowBySecondPlayer_Rank != null)) {
                columnValuesArray[3] = parentSecondPlayerRowBySecondPlayer_Rank[6];
            }
            rowRankRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowRankRow);
            return rowRankRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataTable Clone() {
            RankDataTable cln = ((RankDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Data.DataTable CreateInstance() {
            return new RankDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.columnPosition = base.Columns["Position"];
            this.columnDate = base.Columns["Date"];
            this.columnFirstPlayer_Id = base.Columns["FirstPlayer_Id"];
            this.columnSecondPlayer_Id = base.Columns["SecondPlayer_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.columnPosition = new global::System.Data.DataColumn("Position", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnPosition);
            this.columnDate = new global::System.Data.DataColumn("Date", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnDate);
            this.columnFirstPlayer_Id = new global::System.Data.DataColumn("FirstPlayer_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnFirstPlayer_Id);
            this.columnSecondPlayer_Id = new global::System.Data.DataColumn("SecondPlayer_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnSecondPlayer_Id);
            this.columnPosition.Namespace = "";
            this.columnDate.Namespace = "";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public RankRow NewRankRow() {
            return ((RankRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new RankRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Type GetRowType() {
            return typeof(RankRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.RankRowChanged != null)) {
                this.RankRowChanged(this, new RankRowChangeEvent(((RankRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.RankRowChanging != null)) {
                this.RankRowChanging(this, new RankRowChangeEvent(((RankRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.RankRowDeleted != null)) {
                this.RankRowDeleted(this, new RankRowChangeEvent(((RankRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.RankRowDeleting != null)) {
                this.RankRowDeleting(this, new RankRowChangeEvent(((RankRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void RemoveRankRow(RankRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            DataSetTT ds = new DataSetTT();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "RankDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class MatchDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnTournament;
        
        private global::System.Data.DataColumn columnRound;
        
        private global::System.Data.DataColumn columnMode;
        
        private global::System.Data.DataColumn columnDateTime;
        
        private global::System.Data.DataColumn columnMatch_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public MatchDataTable() {
            this.TableName = "Match";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal MatchDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected MatchDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn TournamentColumn {
            get {
                return this.columnTournament;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn RoundColumn {
            get {
                return this.columnRound;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn ModeColumn {
            get {
                return this.columnMode;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn DateTimeColumn {
            get {
                return this.columnDateTime;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn Match_IdColumn {
            get {
                return this.columnMatch_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public MatchRow this[int index] {
            get {
                return ((MatchRow)(this.Rows[index]));
            }
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event MatchRowChangeEventHandler MatchRowChanging;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event MatchRowChangeEventHandler MatchRowChanged;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event MatchRowChangeEventHandler MatchRowDeleting;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event MatchRowChangeEventHandler MatchRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void AddMatchRow(MatchRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public MatchRow AddMatchRow(string Tournament, string Round, string Mode, string DateTime) {
            MatchRow rowMatchRow = ((MatchRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    Tournament,
                    Round,
                    Mode,
                    DateTime,
                    null};
            rowMatchRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowMatchRow);
            return rowMatchRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataTable Clone() {
            MatchDataTable cln = ((MatchDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Data.DataTable CreateInstance() {
            return new MatchDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.columnTournament = base.Columns["Tournament"];
            this.columnRound = base.Columns["Round"];
            this.columnMode = base.Columns["Mode"];
            this.columnDateTime = base.Columns["DateTime"];
            this.columnMatch_Id = base.Columns["Match_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.columnTournament = new global::System.Data.DataColumn("Tournament", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnTournament);
            this.columnRound = new global::System.Data.DataColumn("Round", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnRound);
            this.columnMode = new global::System.Data.DataColumn("Mode", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnMode);
            this.columnDateTime = new global::System.Data.DataColumn("DateTime", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnDateTime);
            this.columnMatch_Id = new global::System.Data.DataColumn("Match_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnMatch_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columnMatch_Id}, true));
            this.columnTournament.Namespace = "";
            this.columnRound.Namespace = "";
            this.columnMode.Namespace = "";
            this.columnDateTime.Namespace = "";
            this.columnMatch_Id.AutoIncrement = true;
            this.columnMatch_Id.AllowDBNull = false;
            this.columnMatch_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public MatchRow NewMatchRow() {
            return ((MatchRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new MatchRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Type GetRowType() {
            return typeof(MatchRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.MatchRowChanged != null)) {
                this.MatchRowChanged(this, new MatchRowChangeEvent(((MatchRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.MatchRowChanging != null)) {
                this.MatchRowChanging(this, new MatchRowChangeEvent(((MatchRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.MatchRowDeleted != null)) {
                this.MatchRowDeleted(this, new MatchRowChangeEvent(((MatchRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.MatchRowDeleting != null)) {
                this.MatchRowDeleting(this, new MatchRowChangeEvent(((MatchRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void RemoveMatchRow(MatchRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            DataSetTT ds = new DataSetTT();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "MatchDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class FirstPlayerDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnName;
        
        private global::System.Data.DataColumn columnNationality;
        
        private global::System.Data.DataColumn columnSpielsystem;
        
        private global::System.Data.DataColumn columnHändigkeit;
        
        private global::System.Data.DataColumn columnGriffhaltung;
        
        private global::System.Data.DataColumn columnMaterial;
        
        private global::System.Data.DataColumn columnFirstPlayer_Id;
        
        private global::System.Data.DataColumn columnMatch_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public FirstPlayerDataTable() {
            this.TableName = "FirstPlayer";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal FirstPlayerDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected FirstPlayerDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn NameColumn {
            get {
                return this.columnName;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn NationalityColumn {
            get {
                return this.columnNationality;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn SpielsystemColumn {
            get {
                return this.columnSpielsystem;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn HändigkeitColumn {
            get {
                return this.columnHändigkeit;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn GriffhaltungColumn {
            get {
                return this.columnGriffhaltung;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn MaterialColumn {
            get {
                return this.columnMaterial;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn FirstPlayer_IdColumn {
            get {
                return this.columnFirstPlayer_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn Match_IdColumn {
            get {
                return this.columnMatch_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public FirstPlayerRow this[int index] {
            get {
                return ((FirstPlayerRow)(this.Rows[index]));
            }
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event FirstPlayerRowChangeEventHandler FirstPlayerRowChanging;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event FirstPlayerRowChangeEventHandler FirstPlayerRowChanged;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event FirstPlayerRowChangeEventHandler FirstPlayerRowDeleting;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event FirstPlayerRowChangeEventHandler FirstPlayerRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void AddFirstPlayerRow(FirstPlayerRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public FirstPlayerRow AddFirstPlayerRow(string Name, string Nationality, string Spielsystem, string Händigkeit, string Griffhaltung, string Material, MatchRow parentMatchRowByMatch_FirstPlayer) {
            FirstPlayerRow rowFirstPlayerRow = ((FirstPlayerRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    Name,
                    Nationality,
                    Spielsystem,
                    Händigkeit,
                    Griffhaltung,
                    Material,
                    null,
                    null};
            if ((parentMatchRowByMatch_FirstPlayer != null)) {
                columnValuesArray[7] = parentMatchRowByMatch_FirstPlayer[4];
            }
            rowFirstPlayerRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowFirstPlayerRow);
            return rowFirstPlayerRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataTable Clone() {
            FirstPlayerDataTable cln = ((FirstPlayerDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Data.DataTable CreateInstance() {
            return new FirstPlayerDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.columnName = base.Columns["Name"];
            this.columnNationality = base.Columns["Nationality"];
            this.columnSpielsystem = base.Columns["Spielsystem"];
            this.columnHändigkeit = base.Columns["Händigkeit"];
            this.columnGriffhaltung = base.Columns["Griffhaltung"];
            this.columnMaterial = base.Columns["Material"];
            this.columnFirstPlayer_Id = base.Columns["FirstPlayer_Id"];
            this.columnMatch_Id = base.Columns["Match_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnName);
            this.columnNationality = new global::System.Data.DataColumn("Nationality", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnNationality);
            this.columnSpielsystem = new global::System.Data.DataColumn("Spielsystem", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnSpielsystem);
            this.columnHändigkeit = new global::System.Data.DataColumn("Händigkeit", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnHändigkeit);
            this.columnGriffhaltung = new global::System.Data.DataColumn("Griffhaltung", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnGriffhaltung);
            this.columnMaterial = new global::System.Data.DataColumn("Material", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnMaterial);
            this.columnFirstPlayer_Id = new global::System.Data.DataColumn("FirstPlayer_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnFirstPlayer_Id);
            this.columnMatch_Id = new global::System.Data.DataColumn("Match_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnMatch_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columnFirstPlayer_Id}, true));
            this.columnName.Namespace = "";
            this.columnNationality.Namespace = "";
            this.columnSpielsystem.Namespace = "";
            this.columnHändigkeit.Namespace = "";
            this.columnGriffhaltung.Namespace = "";
            this.columnMaterial.Namespace = "";
            this.columnFirstPlayer_Id.AutoIncrement = true;
            this.columnFirstPlayer_Id.AllowDBNull = false;
            this.columnFirstPlayer_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public FirstPlayerRow NewFirstPlayerRow() {
            return ((FirstPlayerRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new FirstPlayerRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Type GetRowType() {
            return typeof(FirstPlayerRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.FirstPlayerRowChanged != null)) {
                this.FirstPlayerRowChanged(this, new FirstPlayerRowChangeEvent(((FirstPlayerRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.FirstPlayerRowChanging != null)) {
                this.FirstPlayerRowChanging(this, new FirstPlayerRowChangeEvent(((FirstPlayerRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.FirstPlayerRowDeleted != null)) {
                this.FirstPlayerRowDeleted(this, new FirstPlayerRowChangeEvent(((FirstPlayerRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.FirstPlayerRowDeleting != null)) {
                this.FirstPlayerRowDeleting(this, new FirstPlayerRowChangeEvent(((FirstPlayerRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void RemoveFirstPlayerRow(FirstPlayerRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            DataSetTT ds = new DataSetTT();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "FirstPlayerDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class SecondPlayerDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnName;
        
        private global::System.Data.DataColumn columnNationality;
        
        private global::System.Data.DataColumn columnSpielsystem;
        
        private global::System.Data.DataColumn columnHändigkeit;
        
        private global::System.Data.DataColumn columnGriffhaltung;
        
        private global::System.Data.DataColumn columnMaterial;
        
        private global::System.Data.DataColumn columnSecondPlayer_Id;
        
        private global::System.Data.DataColumn columnMatch_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public SecondPlayerDataTable() {
            this.TableName = "SecondPlayer";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal SecondPlayerDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected SecondPlayerDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn NameColumn {
            get {
                return this.columnName;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn NationalityColumn {
            get {
                return this.columnNationality;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn SpielsystemColumn {
            get {
                return this.columnSpielsystem;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn HändigkeitColumn {
            get {
                return this.columnHändigkeit;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn GriffhaltungColumn {
            get {
                return this.columnGriffhaltung;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn MaterialColumn {
            get {
                return this.columnMaterial;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn SecondPlayer_IdColumn {
            get {
                return this.columnSecondPlayer_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn Match_IdColumn {
            get {
                return this.columnMatch_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public SecondPlayerRow this[int index] {
            get {
                return ((SecondPlayerRow)(this.Rows[index]));
            }
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event SecondPlayerRowChangeEventHandler SecondPlayerRowChanging;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event SecondPlayerRowChangeEventHandler SecondPlayerRowChanged;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event SecondPlayerRowChangeEventHandler SecondPlayerRowDeleting;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event SecondPlayerRowChangeEventHandler SecondPlayerRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void AddSecondPlayerRow(SecondPlayerRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public SecondPlayerRow AddSecondPlayerRow(string Name, string Nationality, string Spielsystem, string Händigkeit, string Griffhaltung, string Material, MatchRow parentMatchRowByMatch_SecondPlayer) {
            SecondPlayerRow rowSecondPlayerRow = ((SecondPlayerRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    Name,
                    Nationality,
                    Spielsystem,
                    Händigkeit,
                    Griffhaltung,
                    Material,
                    null,
                    null};
            if ((parentMatchRowByMatch_SecondPlayer != null)) {
                columnValuesArray[7] = parentMatchRowByMatch_SecondPlayer[4];
            }
            rowSecondPlayerRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowSecondPlayerRow);
            return rowSecondPlayerRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataTable Clone() {
            SecondPlayerDataTable cln = ((SecondPlayerDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Data.DataTable CreateInstance() {
            return new SecondPlayerDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.columnName = base.Columns["Name"];
            this.columnNationality = base.Columns["Nationality"];
            this.columnSpielsystem = base.Columns["Spielsystem"];
            this.columnHändigkeit = base.Columns["Händigkeit"];
            this.columnGriffhaltung = base.Columns["Griffhaltung"];
            this.columnMaterial = base.Columns["Material"];
            this.columnSecondPlayer_Id = base.Columns["SecondPlayer_Id"];
            this.columnMatch_Id = base.Columns["Match_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnName);
            this.columnNationality = new global::System.Data.DataColumn("Nationality", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnNationality);
            this.columnSpielsystem = new global::System.Data.DataColumn("Spielsystem", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnSpielsystem);
            this.columnHändigkeit = new global::System.Data.DataColumn("Händigkeit", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnHändigkeit);
            this.columnGriffhaltung = new global::System.Data.DataColumn("Griffhaltung", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnGriffhaltung);
            this.columnMaterial = new global::System.Data.DataColumn("Material", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnMaterial);
            this.columnSecondPlayer_Id = new global::System.Data.DataColumn("SecondPlayer_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnSecondPlayer_Id);
            this.columnMatch_Id = new global::System.Data.DataColumn("Match_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnMatch_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columnSecondPlayer_Id}, true));
            this.columnName.Namespace = "";
            this.columnNationality.Namespace = "";
            this.columnSpielsystem.Namespace = "";
            this.columnHändigkeit.Namespace = "";
            this.columnGriffhaltung.Namespace = "";
            this.columnMaterial.Namespace = "";
            this.columnSecondPlayer_Id.AutoIncrement = true;
            this.columnSecondPlayer_Id.AllowDBNull = false;
            this.columnSecondPlayer_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public SecondPlayerRow NewSecondPlayerRow() {
            return ((SecondPlayerRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new SecondPlayerRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Type GetRowType() {
            return typeof(SecondPlayerRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.SecondPlayerRowChanged != null)) {
                this.SecondPlayerRowChanged(this, new SecondPlayerRowChangeEvent(((SecondPlayerRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.SecondPlayerRowChanging != null)) {
                this.SecondPlayerRowChanging(this, new SecondPlayerRowChangeEvent(((SecondPlayerRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.SecondPlayerRowDeleted != null)) {
                this.SecondPlayerRowDeleted(this, new SecondPlayerRowChangeEvent(((SecondPlayerRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.SecondPlayerRowDeleting != null)) {
                this.SecondPlayerRowDeleting(this, new SecondPlayerRowChangeEvent(((SecondPlayerRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void RemoveSecondPlayerRow(SecondPlayerRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            DataSetTT ds = new DataSetTT();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "SecondPlayerDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class RalliesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnRallies_Id;
        
        private global::System.Data.DataColumn columnMatch_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public RalliesDataTable() {
            this.TableName = "Rallies";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal RalliesDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected RalliesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn Rallies_IdColumn {
            get {
                return this.columnRallies_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn Match_IdColumn {
            get {
                return this.columnMatch_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public RalliesRow this[int index] {
            get {
                return ((RalliesRow)(this.Rows[index]));
            }
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event RalliesRowChangeEventHandler RalliesRowChanging;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event RalliesRowChangeEventHandler RalliesRowChanged;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event RalliesRowChangeEventHandler RalliesRowDeleting;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event RalliesRowChangeEventHandler RalliesRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void AddRalliesRow(RalliesRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public RalliesRow AddRalliesRow(MatchRow parentMatchRowByMatch_Rallies) {
            RalliesRow rowRalliesRow = ((RalliesRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    null,
                    null};
            if ((parentMatchRowByMatch_Rallies != null)) {
                columnValuesArray[1] = parentMatchRowByMatch_Rallies[4];
            }
            rowRalliesRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowRalliesRow);
            return rowRalliesRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataTable Clone() {
            RalliesDataTable cln = ((RalliesDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Data.DataTable CreateInstance() {
            return new RalliesDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.columnRallies_Id = base.Columns["Rallies_Id"];
            this.columnMatch_Id = base.Columns["Match_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.columnRallies_Id = new global::System.Data.DataColumn("Rallies_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnRallies_Id);
            this.columnMatch_Id = new global::System.Data.DataColumn("Match_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnMatch_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columnRallies_Id}, true));
            this.columnRallies_Id.AutoIncrement = true;
            this.columnRallies_Id.AllowDBNull = false;
            this.columnRallies_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public RalliesRow NewRalliesRow() {
            return ((RalliesRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new RalliesRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Type GetRowType() {
            return typeof(RalliesRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.RalliesRowChanged != null)) {
                this.RalliesRowChanged(this, new RalliesRowChangeEvent(((RalliesRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.RalliesRowChanging != null)) {
                this.RalliesRowChanging(this, new RalliesRowChangeEvent(((RalliesRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.RalliesRowDeleted != null)) {
                this.RalliesRowDeleted(this, new RalliesRowChangeEvent(((RalliesRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.RalliesRowDeleting != null)) {
                this.RalliesRowDeleting(this, new RalliesRowChangeEvent(((RalliesRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void RemoveRalliesRow(RalliesRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            DataSetTT ds = new DataSetTT();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "RalliesDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class RallyDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnNummer;
        
        private global::System.Data.DataColumn columnWinner;
        
        private global::System.Data.DataColumn columnLength;
        
        private global::System.Data.DataColumn columnServer;
        
        private global::System.Data.DataColumn columnAnfang;
        
        private global::System.Data.DataColumn columnEnde;
        
        private global::System.Data.DataColumn columnKommentar;
        
        private global::System.Data.DataColumn columnRally_Id;
        
        private global::System.Data.DataColumn columnRallies_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public RallyDataTable() {
            this.TableName = "Rally";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal RallyDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected RallyDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn NummerColumn {
            get {
                return this.columnNummer;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn WinnerColumn {
            get {
                return this.columnWinner;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn LengthColumn {
            get {
                return this.columnLength;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn ServerColumn {
            get {
                return this.columnServer;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn AnfangColumn {
            get {
                return this.columnAnfang;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn EndeColumn {
            get {
                return this.columnEnde;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn KommentarColumn {
            get {
                return this.columnKommentar;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn Rally_IdColumn {
            get {
                return this.columnRally_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn Rallies_IdColumn {
            get {
                return this.columnRallies_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public RallyRow this[int index] {
            get {
                return ((RallyRow)(this.Rows[index]));
            }
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event RallyRowChangeEventHandler RallyRowChanging;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event RallyRowChangeEventHandler RallyRowChanged;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event RallyRowChangeEventHandler RallyRowDeleting;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event RallyRowChangeEventHandler RallyRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void AddRallyRow(RallyRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public RallyRow AddRallyRow(string Nummer, string Winner, string Length, string Server, string Anfang, string Ende, string Kommentar, RalliesRow parentRalliesRowByRallies_Rally) {
            RallyRow rowRallyRow = ((RallyRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    Nummer,
                    Winner,
                    Length,
                    Server,
                    Anfang,
                    Ende,
                    Kommentar,
                    null,
                    null};
            if ((parentRalliesRowByRallies_Rally != null)) {
                columnValuesArray[8] = parentRalliesRowByRallies_Rally[0];
            }
            rowRallyRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowRallyRow);
            return rowRallyRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataTable Clone() {
            RallyDataTable cln = ((RallyDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Data.DataTable CreateInstance() {
            return new RallyDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.columnNummer = base.Columns["Nummer"];
            this.columnWinner = base.Columns["Winner"];
            this.columnLength = base.Columns["Length"];
            this.columnServer = base.Columns["Server"];
            this.columnAnfang = base.Columns["Anfang"];
            this.columnEnde = base.Columns["Ende"];
            this.columnKommentar = base.Columns["Kommentar"];
            this.columnRally_Id = base.Columns["Rally_Id"];
            this.columnRallies_Id = base.Columns["Rallies_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.columnNummer = new global::System.Data.DataColumn("Nummer", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnNummer);
            this.columnWinner = new global::System.Data.DataColumn("Winner", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnWinner);
            this.columnLength = new global::System.Data.DataColumn("Length", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnLength);
            this.columnServer = new global::System.Data.DataColumn("Server", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnServer);
            this.columnAnfang = new global::System.Data.DataColumn("Anfang", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnAnfang);
            this.columnEnde = new global::System.Data.DataColumn("Ende", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnEnde);
            this.columnKommentar = new global::System.Data.DataColumn("Kommentar", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnKommentar);
            this.columnRally_Id = new global::System.Data.DataColumn("Rally_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnRally_Id);
            this.columnRallies_Id = new global::System.Data.DataColumn("Rallies_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnRallies_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columnRally_Id}, true));
            this.columnNummer.Namespace = "";
            this.columnWinner.Namespace = "";
            this.columnLength.Namespace = "";
            this.columnServer.Namespace = "";
            this.columnAnfang.Namespace = "";
            this.columnEnde.Namespace = "";
            this.columnKommentar.Namespace = "";
            this.columnRally_Id.AutoIncrement = true;
            this.columnRally_Id.AllowDBNull = false;
            this.columnRally_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public RallyRow NewRallyRow() {
            return ((RallyRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new RallyRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Type GetRowType() {
            return typeof(RallyRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.RallyRowChanged != null)) {
                this.RallyRowChanged(this, new RallyRowChangeEvent(((RallyRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.RallyRowChanging != null)) {
                this.RallyRowChanging(this, new RallyRowChangeEvent(((RallyRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.RallyRowDeleted != null)) {
                this.RallyRowDeleted(this, new RallyRowChangeEvent(((RallyRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.RallyRowDeleting != null)) {
                this.RallyRowDeleting(this, new RallyRowChangeEvent(((RallyRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void RemoveRallyRow(RallyRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            DataSetTT ds = new DataSetTT();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "RallyDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class CurrentRallyScoreDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnFirst;
        
        private global::System.Data.DataColumn columnSecond;
        
        private global::System.Data.DataColumn columnRally_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public CurrentRallyScoreDataTable() {
            this.TableName = "CurrentRallyScore";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal CurrentRallyScoreDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected CurrentRallyScoreDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn FirstColumn {
            get {
                return this.columnFirst;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn SecondColumn {
            get {
                return this.columnSecond;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn Rally_IdColumn {
            get {
                return this.columnRally_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public CurrentRallyScoreRow this[int index] {
            get {
                return ((CurrentRallyScoreRow)(this.Rows[index]));
            }
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event CurrentRallyScoreRowChangeEventHandler CurrentRallyScoreRowChanging;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event CurrentRallyScoreRowChangeEventHandler CurrentRallyScoreRowChanged;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event CurrentRallyScoreRowChangeEventHandler CurrentRallyScoreRowDeleting;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event CurrentRallyScoreRowChangeEventHandler CurrentRallyScoreRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void AddCurrentRallyScoreRow(CurrentRallyScoreRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public CurrentRallyScoreRow AddCurrentRallyScoreRow(string First, string Second, RallyRow parentRallyRowByRally_CurrentRallyScore) {
            CurrentRallyScoreRow rowCurrentRallyScoreRow = ((CurrentRallyScoreRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    First,
                    Second,
                    null};
            if ((parentRallyRowByRally_CurrentRallyScore != null)) {
                columnValuesArray[2] = parentRallyRowByRally_CurrentRallyScore[7];
            }
            rowCurrentRallyScoreRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowCurrentRallyScoreRow);
            return rowCurrentRallyScoreRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataTable Clone() {
            CurrentRallyScoreDataTable cln = ((CurrentRallyScoreDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Data.DataTable CreateInstance() {
            return new CurrentRallyScoreDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.columnFirst = base.Columns["First"];
            this.columnSecond = base.Columns["Second"];
            this.columnRally_Id = base.Columns["Rally_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.columnFirst = new global::System.Data.DataColumn("First", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnFirst);
            this.columnSecond = new global::System.Data.DataColumn("Second", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnSecond);
            this.columnRally_Id = new global::System.Data.DataColumn("Rally_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnRally_Id);
            this.columnFirst.Namespace = "";
            this.columnSecond.Namespace = "";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public CurrentRallyScoreRow NewCurrentRallyScoreRow() {
            return ((CurrentRallyScoreRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new CurrentRallyScoreRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Type GetRowType() {
            return typeof(CurrentRallyScoreRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.CurrentRallyScoreRowChanged != null)) {
                this.CurrentRallyScoreRowChanged(this, new CurrentRallyScoreRowChangeEvent(((CurrentRallyScoreRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.CurrentRallyScoreRowChanging != null)) {
                this.CurrentRallyScoreRowChanging(this, new CurrentRallyScoreRowChangeEvent(((CurrentRallyScoreRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.CurrentRallyScoreRowDeleted != null)) {
                this.CurrentRallyScoreRowDeleted(this, new CurrentRallyScoreRowChangeEvent(((CurrentRallyScoreRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.CurrentRallyScoreRowDeleting != null)) {
                this.CurrentRallyScoreRowDeleting(this, new CurrentRallyScoreRowChangeEvent(((CurrentRallyScoreRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void RemoveCurrentRallyScoreRow(CurrentRallyScoreRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            DataSetTT ds = new DataSetTT();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "CurrentRallyScoreDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class CurrentSetScoreDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnFirst;
        
        private global::System.Data.DataColumn columnSecond;
        
        private global::System.Data.DataColumn columnRally_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public CurrentSetScoreDataTable() {
            this.TableName = "CurrentSetScore";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal CurrentSetScoreDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected CurrentSetScoreDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn FirstColumn {
            get {
                return this.columnFirst;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn SecondColumn {
            get {
                return this.columnSecond;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn Rally_IdColumn {
            get {
                return this.columnRally_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public CurrentSetScoreRow this[int index] {
            get {
                return ((CurrentSetScoreRow)(this.Rows[index]));
            }
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event CurrentSetScoreRowChangeEventHandler CurrentSetScoreRowChanging;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event CurrentSetScoreRowChangeEventHandler CurrentSetScoreRowChanged;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event CurrentSetScoreRowChangeEventHandler CurrentSetScoreRowDeleting;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event CurrentSetScoreRowChangeEventHandler CurrentSetScoreRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void AddCurrentSetScoreRow(CurrentSetScoreRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public CurrentSetScoreRow AddCurrentSetScoreRow(string First, string Second, RallyRow parentRallyRowByRally_CurrentSetScore) {
            CurrentSetScoreRow rowCurrentSetScoreRow = ((CurrentSetScoreRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    First,
                    Second,
                    null};
            if ((parentRallyRowByRally_CurrentSetScore != null)) {
                columnValuesArray[2] = parentRallyRowByRally_CurrentSetScore[7];
            }
            rowCurrentSetScoreRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowCurrentSetScoreRow);
            return rowCurrentSetScoreRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataTable Clone() {
            CurrentSetScoreDataTable cln = ((CurrentSetScoreDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Data.DataTable CreateInstance() {
            return new CurrentSetScoreDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.columnFirst = base.Columns["First"];
            this.columnSecond = base.Columns["Second"];
            this.columnRally_Id = base.Columns["Rally_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.columnFirst = new global::System.Data.DataColumn("First", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnFirst);
            this.columnSecond = new global::System.Data.DataColumn("Second", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnSecond);
            this.columnRally_Id = new global::System.Data.DataColumn("Rally_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnRally_Id);
            this.columnFirst.Namespace = "";
            this.columnSecond.Namespace = "";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public CurrentSetScoreRow NewCurrentSetScoreRow() {
            return ((CurrentSetScoreRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new CurrentSetScoreRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Type GetRowType() {
            return typeof(CurrentSetScoreRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.CurrentSetScoreRowChanged != null)) {
                this.CurrentSetScoreRowChanged(this, new CurrentSetScoreRowChangeEvent(((CurrentSetScoreRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.CurrentSetScoreRowChanging != null)) {
                this.CurrentSetScoreRowChanging(this, new CurrentSetScoreRowChangeEvent(((CurrentSetScoreRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.CurrentSetScoreRowDeleted != null)) {
                this.CurrentSetScoreRowDeleted(this, new CurrentSetScoreRowChangeEvent(((CurrentSetScoreRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.CurrentSetScoreRowDeleting != null)) {
                this.CurrentSetScoreRowDeleting(this, new CurrentSetScoreRowChangeEvent(((CurrentSetScoreRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void RemoveCurrentSetScoreRow(CurrentSetScoreRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            DataSetTT ds = new DataSetTT();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "CurrentSetScoreDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class SchlagDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnNummer;
        
        private global::System.Data.DataColumn columnSpieler;
        
        private global::System.Data.DataColumn columnSchlägerseite;
        
        private global::System.Data.DataColumn columnAufschlagart;
        
        private global::System.Data.DataColumn columnQualität;
        
        private global::System.Data.DataColumn columnSpielerposition;
        
        private global::System.Data.DataColumn columnBesonderes;
        
        private global::System.Data.DataColumn columnVerlauf;
        
        private global::System.Data.DataColumn columnUmlaufen;
        
        private global::System.Data.DataColumn columnBalltreffpunkt;
        
        private global::System.Data.DataColumn columnAggressivität;
        
        private global::System.Data.DataColumn columnSchlag_Id;
        
        private global::System.Data.DataColumn columnRally_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public SchlagDataTable() {
            this.TableName = "Schlag";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal SchlagDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected SchlagDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn NummerColumn {
            get {
                return this.columnNummer;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn SpielerColumn {
            get {
                return this.columnSpieler;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn SchlägerseiteColumn {
            get {
                return this.columnSchlägerseite;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn AufschlagartColumn {
            get {
                return this.columnAufschlagart;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn QualitätColumn {
            get {
                return this.columnQualität;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn SpielerpositionColumn {
            get {
                return this.columnSpielerposition;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn BesonderesColumn {
            get {
                return this.columnBesonderes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn VerlaufColumn {
            get {
                return this.columnVerlauf;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn UmlaufenColumn {
            get {
                return this.columnUmlaufen;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn BalltreffpunktColumn {
            get {
                return this.columnBalltreffpunkt;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn AggressivitätColumn {
            get {
                return this.columnAggressivität;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn Schlag_IdColumn {
            get {
                return this.columnSchlag_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn Rally_IdColumn {
            get {
                return this.columnRally_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public SchlagRow this[int index] {
            get {
                return ((SchlagRow)(this.Rows[index]));
            }
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event SchlagRowChangeEventHandler SchlagRowChanging;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event SchlagRowChangeEventHandler SchlagRowChanged;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event SchlagRowChangeEventHandler SchlagRowDeleting;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event SchlagRowChangeEventHandler SchlagRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void AddSchlagRow(SchlagRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public SchlagRow AddSchlagRow(string Nummer, string Spieler, string Schlägerseite, string Aufschlagart, string Qualität, string Spielerposition, string Besonderes, string Verlauf, string Umlaufen, string Balltreffpunkt, string Aggressivität, RallyRow parentRallyRowByRally_Schlag) {
            SchlagRow rowSchlagRow = ((SchlagRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    Nummer,
                    Spieler,
                    Schlägerseite,
                    Aufschlagart,
                    Qualität,
                    Spielerposition,
                    Besonderes,
                    Verlauf,
                    Umlaufen,
                    Balltreffpunkt,
                    Aggressivität,
                    null,
                    null};
            if ((parentRallyRowByRally_Schlag != null)) {
                columnValuesArray[12] = parentRallyRowByRally_Schlag[7];
            }
            rowSchlagRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowSchlagRow);
            return rowSchlagRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataTable Clone() {
            SchlagDataTable cln = ((SchlagDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Data.DataTable CreateInstance() {
            return new SchlagDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.columnNummer = base.Columns["Nummer"];
            this.columnSpieler = base.Columns["Spieler"];
            this.columnSchlägerseite = base.Columns["Schlägerseite"];
            this.columnAufschlagart = base.Columns["Aufschlagart"];
            this.columnQualität = base.Columns["Qualität"];
            this.columnSpielerposition = base.Columns["Spielerposition"];
            this.columnBesonderes = base.Columns["Besonderes"];
            this.columnVerlauf = base.Columns["Verlauf"];
            this.columnUmlaufen = base.Columns["Umlaufen"];
            this.columnBalltreffpunkt = base.Columns["Balltreffpunkt"];
            this.columnAggressivität = base.Columns["Aggressivität"];
            this.columnSchlag_Id = base.Columns["Schlag_Id"];
            this.columnRally_Id = base.Columns["Rally_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.columnNummer = new global::System.Data.DataColumn("Nummer", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnNummer);
            this.columnSpieler = new global::System.Data.DataColumn("Spieler", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnSpieler);
            this.columnSchlägerseite = new global::System.Data.DataColumn("Schlägerseite", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnSchlägerseite);
            this.columnAufschlagart = new global::System.Data.DataColumn("Aufschlagart", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnAufschlagart);
            this.columnQualität = new global::System.Data.DataColumn("Qualität", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnQualität);
            this.columnSpielerposition = new global::System.Data.DataColumn("Spielerposition", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnSpielerposition);
            this.columnBesonderes = new global::System.Data.DataColumn("Besonderes", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnBesonderes);
            this.columnVerlauf = new global::System.Data.DataColumn("Verlauf", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnVerlauf);
            this.columnUmlaufen = new global::System.Data.DataColumn("Umlaufen", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnUmlaufen);
            this.columnBalltreffpunkt = new global::System.Data.DataColumn("Balltreffpunkt", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnBalltreffpunkt);
            this.columnAggressivität = new global::System.Data.DataColumn("Aggressivität", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnAggressivität);
            this.columnSchlag_Id = new global::System.Data.DataColumn("Schlag_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnSchlag_Id);
            this.columnRally_Id = new global::System.Data.DataColumn("Rally_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnRally_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columnSchlag_Id}, true));
            this.columnNummer.Namespace = "";
            this.columnSpieler.Namespace = "";
            this.columnSchlägerseite.Namespace = "";
            this.columnAufschlagart.Namespace = "";
            this.columnQualität.Namespace = "";
            this.columnSpielerposition.Namespace = "";
            this.columnBesonderes.Namespace = "";
            this.columnVerlauf.Namespace = "";
            this.columnUmlaufen.Namespace = "";
            this.columnBalltreffpunkt.Namespace = "";
            this.columnAggressivität.Namespace = "";
            this.columnSchlag_Id.AutoIncrement = true;
            this.columnSchlag_Id.AllowDBNull = false;
            this.columnSchlag_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public SchlagRow NewSchlagRow() {
            return ((SchlagRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new SchlagRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Type GetRowType() {
            return typeof(SchlagRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.SchlagRowChanged != null)) {
                this.SchlagRowChanged(this, new SchlagRowChangeEvent(((SchlagRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.SchlagRowChanging != null)) {
                this.SchlagRowChanging(this, new SchlagRowChangeEvent(((SchlagRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.SchlagRowDeleted != null)) {
                this.SchlagRowDeleted(this, new SchlagRowChangeEvent(((SchlagRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.SchlagRowDeleting != null)) {
                this.SchlagRowDeleting(this, new SchlagRowChangeEvent(((SchlagRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void RemoveSchlagRow(SchlagRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            DataSetTT ds = new DataSetTT();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "SchlagDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class SchlagtechnikDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnArt;
        
        private global::System.Data.DataColumn columnOption;
        
        private global::System.Data.DataColumn columnSchlag_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public SchlagtechnikDataTable() {
            this.TableName = "Schlagtechnik";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal SchlagtechnikDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected SchlagtechnikDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn ArtColumn {
            get {
                return this.columnArt;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn OptionColumn {
            get {
                return this.columnOption;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn Schlag_IdColumn {
            get {
                return this.columnSchlag_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public SchlagtechnikRow this[int index] {
            get {
                return ((SchlagtechnikRow)(this.Rows[index]));
            }
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event SchlagtechnikRowChangeEventHandler SchlagtechnikRowChanging;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event SchlagtechnikRowChangeEventHandler SchlagtechnikRowChanged;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event SchlagtechnikRowChangeEventHandler SchlagtechnikRowDeleting;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event SchlagtechnikRowChangeEventHandler SchlagtechnikRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void AddSchlagtechnikRow(SchlagtechnikRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public SchlagtechnikRow AddSchlagtechnikRow(string Art, string Option, SchlagRow parentSchlagRowBySchlag_Schlagtechnik) {
            SchlagtechnikRow rowSchlagtechnikRow = ((SchlagtechnikRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    Art,
                    Option,
                    null};
            if ((parentSchlagRowBySchlag_Schlagtechnik != null)) {
                columnValuesArray[2] = parentSchlagRowBySchlag_Schlagtechnik[11];
            }
            rowSchlagtechnikRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowSchlagtechnikRow);
            return rowSchlagtechnikRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataTable Clone() {
            SchlagtechnikDataTable cln = ((SchlagtechnikDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Data.DataTable CreateInstance() {
            return new SchlagtechnikDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.columnArt = base.Columns["Art"];
            this.columnOption = base.Columns["Option"];
            this.columnSchlag_Id = base.Columns["Schlag_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.columnArt = new global::System.Data.DataColumn("Art", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnArt);
            this.columnOption = new global::System.Data.DataColumn("Option", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnOption);
            this.columnSchlag_Id = new global::System.Data.DataColumn("Schlag_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnSchlag_Id);
            this.columnArt.Namespace = "";
            this.columnOption.Namespace = "";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public SchlagtechnikRow NewSchlagtechnikRow() {
            return ((SchlagtechnikRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new SchlagtechnikRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Type GetRowType() {
            return typeof(SchlagtechnikRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.SchlagtechnikRowChanged != null)) {
                this.SchlagtechnikRowChanged(this, new SchlagtechnikRowChangeEvent(((SchlagtechnikRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.SchlagtechnikRowChanging != null)) {
                this.SchlagtechnikRowChanging(this, new SchlagtechnikRowChangeEvent(((SchlagtechnikRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.SchlagtechnikRowDeleted != null)) {
                this.SchlagtechnikRowDeleted(this, new SchlagtechnikRowChangeEvent(((SchlagtechnikRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.SchlagtechnikRowDeleting != null)) {
                this.SchlagtechnikRowDeleting(this, new SchlagtechnikRowChangeEvent(((SchlagtechnikRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void RemoveSchlagtechnikRow(SchlagtechnikRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            DataSetTT ds = new DataSetTT();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "SchlagtechnikDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class SpinDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnUS;
        
        private global::System.Data.DataColumn columnÜS;
        
        private global::System.Data.DataColumn columnSL;
        
        private global::System.Data.DataColumn columnSR;
        
        private global::System.Data.DataColumn columnNo;
        
        private global::System.Data.DataColumn columnSchlag_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public SpinDataTable() {
            this.TableName = "Spin";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal SpinDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected SpinDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn USColumn {
            get {
                return this.columnUS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn ÜSColumn {
            get {
                return this.columnÜS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn SLColumn {
            get {
                return this.columnSL;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn SRColumn {
            get {
                return this.columnSR;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn NoColumn {
            get {
                return this.columnNo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn Schlag_IdColumn {
            get {
                return this.columnSchlag_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public SpinRow this[int index] {
            get {
                return ((SpinRow)(this.Rows[index]));
            }
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event SpinRowChangeEventHandler SpinRowChanging;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event SpinRowChangeEventHandler SpinRowChanged;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event SpinRowChangeEventHandler SpinRowDeleting;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event SpinRowChangeEventHandler SpinRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void AddSpinRow(SpinRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public SpinRow AddSpinRow(string US, string ÜS, string SL, string SR, string No, SchlagRow parentSchlagRowBySchlag_Spin) {
            SpinRow rowSpinRow = ((SpinRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    US,
                    ÜS,
                    SL,
                    SR,
                    No,
                    null};
            if ((parentSchlagRowBySchlag_Spin != null)) {
                columnValuesArray[5] = parentSchlagRowBySchlag_Spin[11];
            }
            rowSpinRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowSpinRow);
            return rowSpinRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataTable Clone() {
            SpinDataTable cln = ((SpinDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Data.DataTable CreateInstance() {
            return new SpinDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.columnUS = base.Columns["US"];
            this.columnÜS = base.Columns["ÜS"];
            this.columnSL = base.Columns["SL"];
            this.columnSR = base.Columns["SR"];
            this.columnNo = base.Columns["No"];
            this.columnSchlag_Id = base.Columns["Schlag_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.columnUS = new global::System.Data.DataColumn("US", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnUS);
            this.columnÜS = new global::System.Data.DataColumn("ÜS", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnÜS);
            this.columnSL = new global::System.Data.DataColumn("SL", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnSL);
            this.columnSR = new global::System.Data.DataColumn("SR", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnSR);
            this.columnNo = new global::System.Data.DataColumn("No", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnNo);
            this.columnSchlag_Id = new global::System.Data.DataColumn("Schlag_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnSchlag_Id);
            this.columnUS.Namespace = "";
            this.columnÜS.Namespace = "";
            this.columnSL.Namespace = "";
            this.columnSR.Namespace = "";
            this.columnNo.Namespace = "";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public SpinRow NewSpinRow() {
            return ((SpinRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new SpinRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Type GetRowType() {
            return typeof(SpinRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.SpinRowChanged != null)) {
                this.SpinRowChanged(this, new SpinRowChangeEvent(((SpinRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.SpinRowChanging != null)) {
                this.SpinRowChanging(this, new SpinRowChangeEvent(((SpinRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.SpinRowDeleted != null)) {
                this.SpinRowDeleted(this, new SpinRowChangeEvent(((SpinRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.SpinRowDeleting != null)) {
                this.SpinRowDeleting(this, new SpinRowChangeEvent(((SpinRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void RemoveSpinRow(SpinRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            DataSetTT ds = new DataSetTT();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "SpinDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class PlatzierungDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnWX;
        
        private global::System.Data.DataColumn columnWY;
        
        private global::System.Data.DataColumn columnSchlag_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public PlatzierungDataTable() {
            this.TableName = "Platzierung";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal PlatzierungDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected PlatzierungDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn WXColumn {
            get {
                return this.columnWX;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn WYColumn {
            get {
                return this.columnWY;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataColumn Schlag_IdColumn {
            get {
                return this.columnSchlag_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public PlatzierungRow this[int index] {
            get {
                return ((PlatzierungRow)(this.Rows[index]));
            }
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event PlatzierungRowChangeEventHandler PlatzierungRowChanging;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event PlatzierungRowChangeEventHandler PlatzierungRowChanged;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event PlatzierungRowChangeEventHandler PlatzierungRowDeleting;
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public event PlatzierungRowChangeEventHandler PlatzierungRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void AddPlatzierungRow(PlatzierungRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public PlatzierungRow AddPlatzierungRow(string WX, string WY, SchlagRow parentSchlagRowBySchlag_Platzierung) {
            PlatzierungRow rowPlatzierungRow = ((PlatzierungRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    WX,
                    WY,
                    null};
            if ((parentSchlagRowBySchlag_Platzierung != null)) {
                columnValuesArray[2] = parentSchlagRowBySchlag_Platzierung[11];
            }
            rowPlatzierungRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowPlatzierungRow);
            return rowPlatzierungRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataTable Clone() {
            PlatzierungDataTable cln = ((PlatzierungDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Data.DataTable CreateInstance() {
            return new PlatzierungDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.columnWX = base.Columns["WX"];
            this.columnWY = base.Columns["WY"];
            this.columnSchlag_Id = base.Columns["Schlag_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.columnWX = new global::System.Data.DataColumn("WX", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnWX);
            this.columnWY = new global::System.Data.DataColumn("WY", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnWY);
            this.columnSchlag_Id = new global::System.Data.DataColumn("Schlag_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnSchlag_Id);
            this.columnWX.Namespace = "";
            this.columnWY.Namespace = "";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public PlatzierungRow NewPlatzierungRow() {
            return ((PlatzierungRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new PlatzierungRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Type GetRowType() {
            return typeof(PlatzierungRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.PlatzierungRowChanged != null)) {
                this.PlatzierungRowChanged(this, new PlatzierungRowChangeEvent(((PlatzierungRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.PlatzierungRowChanging != null)) {
                this.PlatzierungRowChanging(this, new PlatzierungRowChangeEvent(((PlatzierungRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.PlatzierungRowDeleted != null)) {
                this.PlatzierungRowDeleted(this, new PlatzierungRowChangeEvent(((PlatzierungRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.PlatzierungRowDeleting != null)) {
                this.PlatzierungRowDeleting(this, new PlatzierungRowChangeEvent(((PlatzierungRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void RemovePlatzierungRow(PlatzierungRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            DataSetTT ds = new DataSetTT();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "PlatzierungDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    public partial class RankRow : global::System.Data.DataRow {
        
        private RankDataTable tableRank;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal RankRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableRank = ((RankDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string Position {
            get {
                try {
                    return ((string)(this[this.tableRank.PositionColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Position in Tabelle Rank ist DBNull.", e);
                }
            }
            set {
                this[this.tableRank.PositionColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string Date {
            get {
                try {
                    return ((string)(this[this.tableRank.DateColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Date in Tabelle Rank ist DBNull.", e);
                }
            }
            set {
                this[this.tableRank.DateColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public int FirstPlayer_Id {
            get {
                try {
                    return ((int)(this[this.tableRank.FirstPlayer_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte FirstPlayer_Id in Tabelle Rank ist DBNull.", e);
                }
            }
            set {
                this[this.tableRank.FirstPlayer_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public int SecondPlayer_Id {
            get {
                try {
                    return ((int)(this[this.tableRank.SecondPlayer_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte SecondPlayer_Id in Tabelle Rank ist DBNull.", e);
                }
            }
            set {
                this[this.tableRank.SecondPlayer_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public FirstPlayerRow FirstPlayerRow {
            get {
                return ((FirstPlayerRow)(this.GetParentRow(this.Table.ParentRelations["FirstPlayer_Rank"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["FirstPlayer_Rank"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public SecondPlayerRow SecondPlayerRow {
            get {
                return ((SecondPlayerRow)(this.GetParentRow(this.Table.ParentRelations["SecondPlayer_Rank"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["SecondPlayer_Rank"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsPositionNull() {
            return this.IsNull(this.tableRank.PositionColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetPositionNull() {
            this[this.tableRank.PositionColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsDateNull() {
            return this.IsNull(this.tableRank.DateColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetDateNull() {
            this[this.tableRank.DateColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsFirstPlayer_IdNull() {
            return this.IsNull(this.tableRank.FirstPlayer_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetFirstPlayer_IdNull() {
            this[this.tableRank.FirstPlayer_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsSecondPlayer_IdNull() {
            return this.IsNull(this.tableRank.SecondPlayer_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetSecondPlayer_IdNull() {
            this[this.tableRank.SecondPlayer_IdColumn] = global::System.Convert.DBNull;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    public partial class MatchRow : global::System.Data.DataRow {
        
        private MatchDataTable tableMatch;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal MatchRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableMatch = ((MatchDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string Tournament {
            get {
                try {
                    return ((string)(this[this.tableMatch.TournamentColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Tournament in Tabelle Match ist DBNull.", e);
                }
            }
            set {
                this[this.tableMatch.TournamentColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string Round {
            get {
                try {
                    return ((string)(this[this.tableMatch.RoundColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Round in Tabelle Match ist DBNull.", e);
                }
            }
            set {
                this[this.tableMatch.RoundColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string Mode {
            get {
                try {
                    return ((string)(this[this.tableMatch.ModeColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Mode in Tabelle Match ist DBNull.", e);
                }
            }
            set {
                this[this.tableMatch.ModeColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string DateTime {
            get {
                try {
                    return ((string)(this[this.tableMatch.DateTimeColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte DateTime in Tabelle Match ist DBNull.", e);
                }
            }
            set {
                this[this.tableMatch.DateTimeColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public int Match_Id {
            get {
                return ((int)(this[this.tableMatch.Match_IdColumn]));
            }
            set {
                this[this.tableMatch.Match_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsTournamentNull() {
            return this.IsNull(this.tableMatch.TournamentColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetTournamentNull() {
            this[this.tableMatch.TournamentColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsRoundNull() {
            return this.IsNull(this.tableMatch.RoundColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetRoundNull() {
            this[this.tableMatch.RoundColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsModeNull() {
            return this.IsNull(this.tableMatch.ModeColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetModeNull() {
            this[this.tableMatch.ModeColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsDateTimeNull() {
            return this.IsNull(this.tableMatch.DateTimeColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetDateTimeNull() {
            this[this.tableMatch.DateTimeColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public FirstPlayerRow[] GetFirstPlayerRows() {
            if ((this.Table.ChildRelations["Match_FirstPlayer"] == null)) {
                return new FirstPlayerRow[0];
            }
            else {
                return ((FirstPlayerRow[])(base.GetChildRows(this.Table.ChildRelations["Match_FirstPlayer"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public SecondPlayerRow[] GetSecondPlayerRows() {
            if ((this.Table.ChildRelations["Match_SecondPlayer"] == null)) {
                return new SecondPlayerRow[0];
            }
            else {
                return ((SecondPlayerRow[])(base.GetChildRows(this.Table.ChildRelations["Match_SecondPlayer"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public RalliesRow[] GetRalliesRows() {
            if ((this.Table.ChildRelations["Match_Rallies"] == null)) {
                return new RalliesRow[0];
            }
            else {
                return ((RalliesRow[])(base.GetChildRows(this.Table.ChildRelations["Match_Rallies"])));
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    public partial class FirstPlayerRow : global::System.Data.DataRow {
        
        private FirstPlayerDataTable tableFirstPlayer;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal FirstPlayerRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableFirstPlayer = ((FirstPlayerDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string Name {
            get {
                try {
                    return ((string)(this[this.tableFirstPlayer.NameColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Name in Tabelle FirstPlayer ist DBNull.", e);
                }
            }
            set {
                this[this.tableFirstPlayer.NameColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string Nationality {
            get {
                try {
                    return ((string)(this[this.tableFirstPlayer.NationalityColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Nationality in Tabelle FirstPlayer ist DBNull.", e);
                }
            }
            set {
                this[this.tableFirstPlayer.NationalityColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string Spielsystem {
            get {
                try {
                    return ((string)(this[this.tableFirstPlayer.SpielsystemColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Spielsystem in Tabelle FirstPlayer ist DBNull.", e);
                }
            }
            set {
                this[this.tableFirstPlayer.SpielsystemColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string Händigkeit {
            get {
                try {
                    return ((string)(this[this.tableFirstPlayer.HändigkeitColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Händigkeit in Tabelle FirstPlayer ist DBNull.", e);
                }
            }
            set {
                this[this.tableFirstPlayer.HändigkeitColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string Griffhaltung {
            get {
                try {
                    return ((string)(this[this.tableFirstPlayer.GriffhaltungColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Griffhaltung in Tabelle FirstPlayer ist DBNull.", e);
                }
            }
            set {
                this[this.tableFirstPlayer.GriffhaltungColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string Material {
            get {
                try {
                    return ((string)(this[this.tableFirstPlayer.MaterialColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Material in Tabelle FirstPlayer ist DBNull.", e);
                }
            }
            set {
                this[this.tableFirstPlayer.MaterialColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public int FirstPlayer_Id {
            get {
                return ((int)(this[this.tableFirstPlayer.FirstPlayer_IdColumn]));
            }
            set {
                this[this.tableFirstPlayer.FirstPlayer_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public int Match_Id {
            get {
                try {
                    return ((int)(this[this.tableFirstPlayer.Match_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Match_Id in Tabelle FirstPlayer ist DBNull.", e);
                }
            }
            set {
                this[this.tableFirstPlayer.Match_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public MatchRow MatchRow {
            get {
                return ((MatchRow)(this.GetParentRow(this.Table.ParentRelations["Match_FirstPlayer"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["Match_FirstPlayer"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsNameNull() {
            return this.IsNull(this.tableFirstPlayer.NameColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetNameNull() {
            this[this.tableFirstPlayer.NameColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsNationalityNull() {
            return this.IsNull(this.tableFirstPlayer.NationalityColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetNationalityNull() {
            this[this.tableFirstPlayer.NationalityColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsSpielsystemNull() {
            return this.IsNull(this.tableFirstPlayer.SpielsystemColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetSpielsystemNull() {
            this[this.tableFirstPlayer.SpielsystemColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsHändigkeitNull() {
            return this.IsNull(this.tableFirstPlayer.HändigkeitColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetHändigkeitNull() {
            this[this.tableFirstPlayer.HändigkeitColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsGriffhaltungNull() {
            return this.IsNull(this.tableFirstPlayer.GriffhaltungColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetGriffhaltungNull() {
            this[this.tableFirstPlayer.GriffhaltungColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsMaterialNull() {
            return this.IsNull(this.tableFirstPlayer.MaterialColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetMaterialNull() {
            this[this.tableFirstPlayer.MaterialColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsMatch_IdNull() {
            return this.IsNull(this.tableFirstPlayer.Match_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetMatch_IdNull() {
            this[this.tableFirstPlayer.Match_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public RankRow[] GetRankRows() {
            if ((this.Table.ChildRelations["FirstPlayer_Rank"] == null)) {
                return new RankRow[0];
            }
            else {
                return ((RankRow[])(base.GetChildRows(this.Table.ChildRelations["FirstPlayer_Rank"])));
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    public partial class SecondPlayerRow : global::System.Data.DataRow {
        
        private SecondPlayerDataTable tableSecondPlayer;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal SecondPlayerRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableSecondPlayer = ((SecondPlayerDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string Name {
            get {
                try {
                    return ((string)(this[this.tableSecondPlayer.NameColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Name in Tabelle SecondPlayer ist DBNull.", e);
                }
            }
            set {
                this[this.tableSecondPlayer.NameColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string Nationality {
            get {
                try {
                    return ((string)(this[this.tableSecondPlayer.NationalityColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Nationality in Tabelle SecondPlayer ist DBNull.", e);
                }
            }
            set {
                this[this.tableSecondPlayer.NationalityColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string Spielsystem {
            get {
                try {
                    return ((string)(this[this.tableSecondPlayer.SpielsystemColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Spielsystem in Tabelle SecondPlayer ist DBNull.", e);
                }
            }
            set {
                this[this.tableSecondPlayer.SpielsystemColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string Händigkeit {
            get {
                try {
                    return ((string)(this[this.tableSecondPlayer.HändigkeitColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Händigkeit in Tabelle SecondPlayer ist DBNull.", e);
                }
            }
            set {
                this[this.tableSecondPlayer.HändigkeitColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string Griffhaltung {
            get {
                try {
                    return ((string)(this[this.tableSecondPlayer.GriffhaltungColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Griffhaltung in Tabelle SecondPlayer ist DBNull.", e);
                }
            }
            set {
                this[this.tableSecondPlayer.GriffhaltungColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string Material {
            get {
                try {
                    return ((string)(this[this.tableSecondPlayer.MaterialColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Material in Tabelle SecondPlayer ist DBNull.", e);
                }
            }
            set {
                this[this.tableSecondPlayer.MaterialColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public int SecondPlayer_Id {
            get {
                return ((int)(this[this.tableSecondPlayer.SecondPlayer_IdColumn]));
            }
            set {
                this[this.tableSecondPlayer.SecondPlayer_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public int Match_Id {
            get {
                try {
                    return ((int)(this[this.tableSecondPlayer.Match_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Match_Id in Tabelle SecondPlayer ist DBNull.", e);
                }
            }
            set {
                this[this.tableSecondPlayer.Match_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public MatchRow MatchRow {
            get {
                return ((MatchRow)(this.GetParentRow(this.Table.ParentRelations["Match_SecondPlayer"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["Match_SecondPlayer"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsNameNull() {
            return this.IsNull(this.tableSecondPlayer.NameColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetNameNull() {
            this[this.tableSecondPlayer.NameColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsNationalityNull() {
            return this.IsNull(this.tableSecondPlayer.NationalityColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetNationalityNull() {
            this[this.tableSecondPlayer.NationalityColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsSpielsystemNull() {
            return this.IsNull(this.tableSecondPlayer.SpielsystemColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetSpielsystemNull() {
            this[this.tableSecondPlayer.SpielsystemColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsHändigkeitNull() {
            return this.IsNull(this.tableSecondPlayer.HändigkeitColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetHändigkeitNull() {
            this[this.tableSecondPlayer.HändigkeitColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsGriffhaltungNull() {
            return this.IsNull(this.tableSecondPlayer.GriffhaltungColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetGriffhaltungNull() {
            this[this.tableSecondPlayer.GriffhaltungColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsMaterialNull() {
            return this.IsNull(this.tableSecondPlayer.MaterialColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetMaterialNull() {
            this[this.tableSecondPlayer.MaterialColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsMatch_IdNull() {
            return this.IsNull(this.tableSecondPlayer.Match_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetMatch_IdNull() {
            this[this.tableSecondPlayer.Match_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public RankRow[] GetRankRows() {
            if ((this.Table.ChildRelations["SecondPlayer_Rank"] == null)) {
                return new RankRow[0];
            }
            else {
                return ((RankRow[])(base.GetChildRows(this.Table.ChildRelations["SecondPlayer_Rank"])));
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    public partial class RalliesRow : global::System.Data.DataRow {
        
        private RalliesDataTable tableRallies;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal RalliesRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableRallies = ((RalliesDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public int Rallies_Id {
            get {
                return ((int)(this[this.tableRallies.Rallies_IdColumn]));
            }
            set {
                this[this.tableRallies.Rallies_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public int Match_Id {
            get {
                try {
                    return ((int)(this[this.tableRallies.Match_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Match_Id in Tabelle Rallies ist DBNull.", e);
                }
            }
            set {
                this[this.tableRallies.Match_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public MatchRow MatchRow {
            get {
                return ((MatchRow)(this.GetParentRow(this.Table.ParentRelations["Match_Rallies"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["Match_Rallies"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsMatch_IdNull() {
            return this.IsNull(this.tableRallies.Match_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetMatch_IdNull() {
            this[this.tableRallies.Match_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public RallyRow[] GetRallyRows() {
            if ((this.Table.ChildRelations["Rallies_Rally"] == null)) {
                return new RallyRow[0];
            }
            else {
                return ((RallyRow[])(base.GetChildRows(this.Table.ChildRelations["Rallies_Rally"])));
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    public partial class RallyRow : global::System.Data.DataRow {
        
        private RallyDataTable tableRally;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal RallyRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableRally = ((RallyDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string Nummer {
            get {
                try {
                    return ((string)(this[this.tableRally.NummerColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Nummer in Tabelle Rally ist DBNull.", e);
                }
            }
            set {
                this[this.tableRally.NummerColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string Winner {
            get {
                try {
                    return ((string)(this[this.tableRally.WinnerColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Winner in Tabelle Rally ist DBNull.", e);
                }
            }
            set {
                this[this.tableRally.WinnerColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string Length {
            get {
                try {
                    return ((string)(this[this.tableRally.LengthColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Length in Tabelle Rally ist DBNull.", e);
                }
            }
            set {
                this[this.tableRally.LengthColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string Server {
            get {
                try {
                    return ((string)(this[this.tableRally.ServerColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Server in Tabelle Rally ist DBNull.", e);
                }
            }
            set {
                this[this.tableRally.ServerColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string Anfang {
            get {
                try {
                    return ((string)(this[this.tableRally.AnfangColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Anfang in Tabelle Rally ist DBNull.", e);
                }
            }
            set {
                this[this.tableRally.AnfangColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string Ende {
            get {
                try {
                    return ((string)(this[this.tableRally.EndeColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Ende in Tabelle Rally ist DBNull.", e);
                }
            }
            set {
                this[this.tableRally.EndeColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string Kommentar {
            get {
                try {
                    return ((string)(this[this.tableRally.KommentarColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Kommentar in Tabelle Rally ist DBNull.", e);
                }
            }
            set {
                this[this.tableRally.KommentarColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public int Rally_Id {
            get {
                return ((int)(this[this.tableRally.Rally_IdColumn]));
            }
            set {
                this[this.tableRally.Rally_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public int Rallies_Id {
            get {
                try {
                    return ((int)(this[this.tableRally.Rallies_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Rallies_Id in Tabelle Rally ist DBNull.", e);
                }
            }
            set {
                this[this.tableRally.Rallies_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public RalliesRow RalliesRow {
            get {
                return ((RalliesRow)(this.GetParentRow(this.Table.ParentRelations["Rallies_Rally"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["Rallies_Rally"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsNummerNull() {
            return this.IsNull(this.tableRally.NummerColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetNummerNull() {
            this[this.tableRally.NummerColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsWinnerNull() {
            return this.IsNull(this.tableRally.WinnerColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetWinnerNull() {
            this[this.tableRally.WinnerColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsLengthNull() {
            return this.IsNull(this.tableRally.LengthColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetLengthNull() {
            this[this.tableRally.LengthColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsServerNull() {
            return this.IsNull(this.tableRally.ServerColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetServerNull() {
            this[this.tableRally.ServerColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsAnfangNull() {
            return this.IsNull(this.tableRally.AnfangColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetAnfangNull() {
            this[this.tableRally.AnfangColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsEndeNull() {
            return this.IsNull(this.tableRally.EndeColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetEndeNull() {
            this[this.tableRally.EndeColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsKommentarNull() {
            return this.IsNull(this.tableRally.KommentarColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetKommentarNull() {
            this[this.tableRally.KommentarColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsRallies_IdNull() {
            return this.IsNull(this.tableRally.Rallies_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetRallies_IdNull() {
            this[this.tableRally.Rallies_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public CurrentRallyScoreRow[] GetCurrentRallyScoreRows() {
            if ((this.Table.ChildRelations["Rally_CurrentRallyScore"] == null)) {
                return new CurrentRallyScoreRow[0];
            }
            else {
                return ((CurrentRallyScoreRow[])(base.GetChildRows(this.Table.ChildRelations["Rally_CurrentRallyScore"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public CurrentSetScoreRow[] GetCurrentSetScoreRows() {
            if ((this.Table.ChildRelations["Rally_CurrentSetScore"] == null)) {
                return new CurrentSetScoreRow[0];
            }
            else {
                return ((CurrentSetScoreRow[])(base.GetChildRows(this.Table.ChildRelations["Rally_CurrentSetScore"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public SchlagRow[] GetSchlagRows() {
            if ((this.Table.ChildRelations["Rally_Schlag"] == null)) {
                return new SchlagRow[0];
            }
            else {
                return ((SchlagRow[])(base.GetChildRows(this.Table.ChildRelations["Rally_Schlag"])));
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    public partial class CurrentRallyScoreRow : global::System.Data.DataRow {
        
        private CurrentRallyScoreDataTable tableCurrentRallyScore;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal CurrentRallyScoreRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableCurrentRallyScore = ((CurrentRallyScoreDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string First {
            get {
                try {
                    return ((string)(this[this.tableCurrentRallyScore.FirstColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte First in Tabelle CurrentRallyScore ist DBNull.", e);
                }
            }
            set {
                this[this.tableCurrentRallyScore.FirstColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string Second {
            get {
                try {
                    return ((string)(this[this.tableCurrentRallyScore.SecondColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Second in Tabelle CurrentRallyScore ist DBNull.", e);
                }
            }
            set {
                this[this.tableCurrentRallyScore.SecondColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public int Rally_Id {
            get {
                try {
                    return ((int)(this[this.tableCurrentRallyScore.Rally_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Rally_Id in Tabelle CurrentRallyScore ist DBNull.", e);
                }
            }
            set {
                this[this.tableCurrentRallyScore.Rally_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public RallyRow RallyRow {
            get {
                return ((RallyRow)(this.GetParentRow(this.Table.ParentRelations["Rally_CurrentRallyScore"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["Rally_CurrentRallyScore"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsFirstNull() {
            return this.IsNull(this.tableCurrentRallyScore.FirstColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetFirstNull() {
            this[this.tableCurrentRallyScore.FirstColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsSecondNull() {
            return this.IsNull(this.tableCurrentRallyScore.SecondColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetSecondNull() {
            this[this.tableCurrentRallyScore.SecondColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsRally_IdNull() {
            return this.IsNull(this.tableCurrentRallyScore.Rally_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetRally_IdNull() {
            this[this.tableCurrentRallyScore.Rally_IdColumn] = global::System.Convert.DBNull;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    public partial class CurrentSetScoreRow : global::System.Data.DataRow {
        
        private CurrentSetScoreDataTable tableCurrentSetScore;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal CurrentSetScoreRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableCurrentSetScore = ((CurrentSetScoreDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string First {
            get {
                try {
                    return ((string)(this[this.tableCurrentSetScore.FirstColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte First in Tabelle CurrentSetScore ist DBNull.", e);
                }
            }
            set {
                this[this.tableCurrentSetScore.FirstColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string Second {
            get {
                try {
                    return ((string)(this[this.tableCurrentSetScore.SecondColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Second in Tabelle CurrentSetScore ist DBNull.", e);
                }
            }
            set {
                this[this.tableCurrentSetScore.SecondColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public int Rally_Id {
            get {
                try {
                    return ((int)(this[this.tableCurrentSetScore.Rally_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Rally_Id in Tabelle CurrentSetScore ist DBNull.", e);
                }
            }
            set {
                this[this.tableCurrentSetScore.Rally_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public RallyRow RallyRow {
            get {
                return ((RallyRow)(this.GetParentRow(this.Table.ParentRelations["Rally_CurrentSetScore"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["Rally_CurrentSetScore"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsFirstNull() {
            return this.IsNull(this.tableCurrentSetScore.FirstColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetFirstNull() {
            this[this.tableCurrentSetScore.FirstColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsSecondNull() {
            return this.IsNull(this.tableCurrentSetScore.SecondColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetSecondNull() {
            this[this.tableCurrentSetScore.SecondColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsRally_IdNull() {
            return this.IsNull(this.tableCurrentSetScore.Rally_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetRally_IdNull() {
            this[this.tableCurrentSetScore.Rally_IdColumn] = global::System.Convert.DBNull;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    public partial class SchlagRow : global::System.Data.DataRow {
        
        private SchlagDataTable tableSchlag;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal SchlagRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableSchlag = ((SchlagDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string Nummer {
            get {
                try {
                    return ((string)(this[this.tableSchlag.NummerColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Nummer in Tabelle Schlag ist DBNull.", e);
                }
            }
            set {
                this[this.tableSchlag.NummerColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string Spieler {
            get {
                try {
                    return ((string)(this[this.tableSchlag.SpielerColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Spieler in Tabelle Schlag ist DBNull.", e);
                }
            }
            set {
                this[this.tableSchlag.SpielerColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string Schlägerseite {
            get {
                try {
                    return ((string)(this[this.tableSchlag.SchlägerseiteColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Schlägerseite in Tabelle Schlag ist DBNull.", e);
                }
            }
            set {
                this[this.tableSchlag.SchlägerseiteColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string Aufschlagart {
            get {
                try {
                    return ((string)(this[this.tableSchlag.AufschlagartColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Aufschlagart in Tabelle Schlag ist DBNull.", e);
                }
            }
            set {
                this[this.tableSchlag.AufschlagartColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string Qualität {
            get {
                try {
                    return ((string)(this[this.tableSchlag.QualitätColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Qualität in Tabelle Schlag ist DBNull.", e);
                }
            }
            set {
                this[this.tableSchlag.QualitätColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string Spielerposition {
            get {
                try {
                    return ((string)(this[this.tableSchlag.SpielerpositionColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Spielerposition in Tabelle Schlag ist DBNull.", e);
                }
            }
            set {
                this[this.tableSchlag.SpielerpositionColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string Besonderes {
            get {
                try {
                    return ((string)(this[this.tableSchlag.BesonderesColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Besonderes in Tabelle Schlag ist DBNull.", e);
                }
            }
            set {
                this[this.tableSchlag.BesonderesColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string Verlauf {
            get {
                try {
                    return ((string)(this[this.tableSchlag.VerlaufColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Verlauf in Tabelle Schlag ist DBNull.", e);
                }
            }
            set {
                this[this.tableSchlag.VerlaufColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string Umlaufen {
            get {
                try {
                    return ((string)(this[this.tableSchlag.UmlaufenColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Umlaufen in Tabelle Schlag ist DBNull.", e);
                }
            }
            set {
                this[this.tableSchlag.UmlaufenColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string Balltreffpunkt {
            get {
                try {
                    return ((string)(this[this.tableSchlag.BalltreffpunktColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Balltreffpunkt in Tabelle Schlag ist DBNull.", e);
                }
            }
            set {
                this[this.tableSchlag.BalltreffpunktColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string Aggressivität {
            get {
                try {
                    return ((string)(this[this.tableSchlag.AggressivitätColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Aggressivität in Tabelle Schlag ist DBNull.", e);
                }
            }
            set {
                this[this.tableSchlag.AggressivitätColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public int Schlag_Id {
            get {
                return ((int)(this[this.tableSchlag.Schlag_IdColumn]));
            }
            set {
                this[this.tableSchlag.Schlag_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public int Rally_Id {
            get {
                try {
                    return ((int)(this[this.tableSchlag.Rally_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Rally_Id in Tabelle Schlag ist DBNull.", e);
                }
            }
            set {
                this[this.tableSchlag.Rally_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public RallyRow RallyRow {
            get {
                return ((RallyRow)(this.GetParentRow(this.Table.ParentRelations["Rally_Schlag"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["Rally_Schlag"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsNummerNull() {
            return this.IsNull(this.tableSchlag.NummerColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetNummerNull() {
            this[this.tableSchlag.NummerColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsSpielerNull() {
            return this.IsNull(this.tableSchlag.SpielerColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetSpielerNull() {
            this[this.tableSchlag.SpielerColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsSchlägerseiteNull() {
            return this.IsNull(this.tableSchlag.SchlägerseiteColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetSchlägerseiteNull() {
            this[this.tableSchlag.SchlägerseiteColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsAufschlagartNull() {
            return this.IsNull(this.tableSchlag.AufschlagartColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetAufschlagartNull() {
            this[this.tableSchlag.AufschlagartColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsQualitätNull() {
            return this.IsNull(this.tableSchlag.QualitätColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetQualitätNull() {
            this[this.tableSchlag.QualitätColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsSpielerpositionNull() {
            return this.IsNull(this.tableSchlag.SpielerpositionColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetSpielerpositionNull() {
            this[this.tableSchlag.SpielerpositionColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsBesonderesNull() {
            return this.IsNull(this.tableSchlag.BesonderesColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetBesonderesNull() {
            this[this.tableSchlag.BesonderesColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsVerlaufNull() {
            return this.IsNull(this.tableSchlag.VerlaufColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetVerlaufNull() {
            this[this.tableSchlag.VerlaufColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsUmlaufenNull() {
            return this.IsNull(this.tableSchlag.UmlaufenColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetUmlaufenNull() {
            this[this.tableSchlag.UmlaufenColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsBalltreffpunktNull() {
            return this.IsNull(this.tableSchlag.BalltreffpunktColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetBalltreffpunktNull() {
            this[this.tableSchlag.BalltreffpunktColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsAggressivitätNull() {
            return this.IsNull(this.tableSchlag.AggressivitätColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetAggressivitätNull() {
            this[this.tableSchlag.AggressivitätColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsRally_IdNull() {
            return this.IsNull(this.tableSchlag.Rally_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetRally_IdNull() {
            this[this.tableSchlag.Rally_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public SchlagtechnikRow[] GetSchlagtechnikRows() {
            if ((this.Table.ChildRelations["Schlag_Schlagtechnik"] == null)) {
                return new SchlagtechnikRow[0];
            }
            else {
                return ((SchlagtechnikRow[])(base.GetChildRows(this.Table.ChildRelations["Schlag_Schlagtechnik"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public SpinRow[] GetSpinRows() {
            if ((this.Table.ChildRelations["Schlag_Spin"] == null)) {
                return new SpinRow[0];
            }
            else {
                return ((SpinRow[])(base.GetChildRows(this.Table.ChildRelations["Schlag_Spin"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public PlatzierungRow[] GetPlatzierungRows() {
            if ((this.Table.ChildRelations["Schlag_Platzierung"] == null)) {
                return new PlatzierungRow[0];
            }
            else {
                return ((PlatzierungRow[])(base.GetChildRows(this.Table.ChildRelations["Schlag_Platzierung"])));
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    public partial class SchlagtechnikRow : global::System.Data.DataRow {
        
        private SchlagtechnikDataTable tableSchlagtechnik;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal SchlagtechnikRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableSchlagtechnik = ((SchlagtechnikDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string Art {
            get {
                try {
                    return ((string)(this[this.tableSchlagtechnik.ArtColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Art in Tabelle Schlagtechnik ist DBNull.", e);
                }
            }
            set {
                this[this.tableSchlagtechnik.ArtColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string Option {
            get {
                try {
                    return ((string)(this[this.tableSchlagtechnik.OptionColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Option in Tabelle Schlagtechnik ist DBNull.", e);
                }
            }
            set {
                this[this.tableSchlagtechnik.OptionColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public int Schlag_Id {
            get {
                try {
                    return ((int)(this[this.tableSchlagtechnik.Schlag_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Schlag_Id in Tabelle Schlagtechnik ist DBNull.", e);
                }
            }
            set {
                this[this.tableSchlagtechnik.Schlag_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public SchlagRow SchlagRow {
            get {
                return ((SchlagRow)(this.GetParentRow(this.Table.ParentRelations["Schlag_Schlagtechnik"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["Schlag_Schlagtechnik"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsArtNull() {
            return this.IsNull(this.tableSchlagtechnik.ArtColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetArtNull() {
            this[this.tableSchlagtechnik.ArtColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsOptionNull() {
            return this.IsNull(this.tableSchlagtechnik.OptionColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetOptionNull() {
            this[this.tableSchlagtechnik.OptionColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsSchlag_IdNull() {
            return this.IsNull(this.tableSchlagtechnik.Schlag_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetSchlag_IdNull() {
            this[this.tableSchlagtechnik.Schlag_IdColumn] = global::System.Convert.DBNull;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    public partial class SpinRow : global::System.Data.DataRow {
        
        private SpinDataTable tableSpin;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal SpinRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableSpin = ((SpinDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string US {
            get {
                try {
                    return ((string)(this[this.tableSpin.USColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte US in Tabelle Spin ist DBNull.", e);
                }
            }
            set {
                this[this.tableSpin.USColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string ÜS {
            get {
                try {
                    return ((string)(this[this.tableSpin.ÜSColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte ÜS in Tabelle Spin ist DBNull.", e);
                }
            }
            set {
                this[this.tableSpin.ÜSColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string SL {
            get {
                try {
                    return ((string)(this[this.tableSpin.SLColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte SL in Tabelle Spin ist DBNull.", e);
                }
            }
            set {
                this[this.tableSpin.SLColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string SR {
            get {
                try {
                    return ((string)(this[this.tableSpin.SRColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte SR in Tabelle Spin ist DBNull.", e);
                }
            }
            set {
                this[this.tableSpin.SRColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string No {
            get {
                try {
                    return ((string)(this[this.tableSpin.NoColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte No in Tabelle Spin ist DBNull.", e);
                }
            }
            set {
                this[this.tableSpin.NoColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public int Schlag_Id {
            get {
                try {
                    return ((int)(this[this.tableSpin.Schlag_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Schlag_Id in Tabelle Spin ist DBNull.", e);
                }
            }
            set {
                this[this.tableSpin.Schlag_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public SchlagRow SchlagRow {
            get {
                return ((SchlagRow)(this.GetParentRow(this.Table.ParentRelations["Schlag_Spin"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["Schlag_Spin"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsUSNull() {
            return this.IsNull(this.tableSpin.USColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetUSNull() {
            this[this.tableSpin.USColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsÜSNull() {
            return this.IsNull(this.tableSpin.ÜSColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetÜSNull() {
            this[this.tableSpin.ÜSColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsSLNull() {
            return this.IsNull(this.tableSpin.SLColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetSLNull() {
            this[this.tableSpin.SLColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsSRNull() {
            return this.IsNull(this.tableSpin.SRColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetSRNull() {
            this[this.tableSpin.SRColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsNoNull() {
            return this.IsNull(this.tableSpin.NoColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetNoNull() {
            this[this.tableSpin.NoColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsSchlag_IdNull() {
            return this.IsNull(this.tableSpin.Schlag_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetSchlag_IdNull() {
            this[this.tableSpin.Schlag_IdColumn] = global::System.Convert.DBNull;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    public partial class PlatzierungRow : global::System.Data.DataRow {
        
        private PlatzierungDataTable tablePlatzierung;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal PlatzierungRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tablePlatzierung = ((PlatzierungDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string WX {
            get {
                try {
                    return ((string)(this[this.tablePlatzierung.WXColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte WX in Tabelle Platzierung ist DBNull.", e);
                }
            }
            set {
                this[this.tablePlatzierung.WXColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public string WY {
            get {
                try {
                    return ((string)(this[this.tablePlatzierung.WYColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte WY in Tabelle Platzierung ist DBNull.", e);
                }
            }
            set {
                this[this.tablePlatzierung.WYColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public int Schlag_Id {
            get {
                try {
                    return ((int)(this[this.tablePlatzierung.Schlag_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte Schlag_Id in Tabelle Platzierung ist DBNull.", e);
                }
            }
            set {
                this[this.tablePlatzierung.Schlag_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public SchlagRow SchlagRow {
            get {
                return ((SchlagRow)(this.GetParentRow(this.Table.ParentRelations["Schlag_Platzierung"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["Schlag_Platzierung"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsWXNull() {
            return this.IsNull(this.tablePlatzierung.WXColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetWXNull() {
            this[this.tablePlatzierung.WXColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsWYNull() {
            return this.IsNull(this.tablePlatzierung.WYColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetWYNull() {
            this[this.tablePlatzierung.WYColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool IsSchlag_IdNull() {
            return this.IsNull(this.tablePlatzierung.Schlag_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public void SetSchlag_IdNull() {
            this[this.tablePlatzierung.Schlag_IdColumn] = global::System.Convert.DBNull;
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class RankRowChangeEvent : global::System.EventArgs {
        
        private RankRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public RankRowChangeEvent(RankRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public RankRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class MatchRowChangeEvent : global::System.EventArgs {
        
        private MatchRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public MatchRowChangeEvent(MatchRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public MatchRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class FirstPlayerRowChangeEvent : global::System.EventArgs {
        
        private FirstPlayerRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public FirstPlayerRowChangeEvent(FirstPlayerRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public FirstPlayerRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class SecondPlayerRowChangeEvent : global::System.EventArgs {
        
        private SecondPlayerRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public SecondPlayerRowChangeEvent(SecondPlayerRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public SecondPlayerRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class RalliesRowChangeEvent : global::System.EventArgs {
        
        private RalliesRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public RalliesRowChangeEvent(RalliesRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public RalliesRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class RallyRowChangeEvent : global::System.EventArgs {
        
        private RallyRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public RallyRowChangeEvent(RallyRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public RallyRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class CurrentRallyScoreRowChangeEvent : global::System.EventArgs {
        
        private CurrentRallyScoreRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public CurrentRallyScoreRowChangeEvent(CurrentRallyScoreRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public CurrentRallyScoreRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class CurrentSetScoreRowChangeEvent : global::System.EventArgs {
        
        private CurrentSetScoreRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public CurrentSetScoreRowChangeEvent(CurrentSetScoreRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public CurrentSetScoreRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class SchlagRowChangeEvent : global::System.EventArgs {
        
        private SchlagRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public SchlagRowChangeEvent(SchlagRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public SchlagRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class SchlagtechnikRowChangeEvent : global::System.EventArgs {
        
        private SchlagtechnikRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public SchlagtechnikRowChangeEvent(SchlagtechnikRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public SchlagtechnikRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class SpinRowChangeEvent : global::System.EventArgs {
        
        private SpinRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public SpinRowChangeEvent(SpinRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public SpinRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class PlatzierungRowChangeEvent : global::System.EventArgs {
        
        private PlatzierungRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public PlatzierungRowChangeEvent(PlatzierungRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public PlatzierungRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
}
